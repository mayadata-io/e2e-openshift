#!/bin/bash

pod() {
mkdir -p /root/.ssh
touch /root/.ssh/id_rsa
echo "$SSH_KEYS" > /root/.ssh/id_rsa
chmod 600 /root/.ssh/id_rsa	
ssh -o StrictHostKeyChecking=no $user@$ip -i /root/.ssh/id_rsa 'cd e2e-openshift && bash openebs-openshift-e2e/stages/4-chaos/4CCO06-target-delete node '"'$CI_JOB_ID'"'' '"'$CI_PIPELINE_ID'"' '"'$CI_COMMIT_SHA'"' '"'$RELEASE_TAG'"'
}

node() {
source ~/.profile
#gittoken=$(echo "$github_token")

job_id=$(echo $1)
pipeline_id=$(echo $2)
commit_id=$(echo $3)
releaseTag=$(echo $4)
case_id=4CCO06

time="date"
current_time=$(eval $time)

present_dir=$(pwd)
echo $present_dir

bash openebs-openshift-e2e/utils/e2e-cr jobname:csi-target-delete jobphase:Waiting init_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" openebs_version:"$releaseTag"
bash openebs-openshift-e2e/utils/e2e-cr jobname:csi-target-delete jobphase:Running init_time:"$current_time"

################
# e2eBook 1 #
################

echo "*******Deploying Busybox Application****"
oc adm policy add-scc-to-user anyuid system:serviceaccount:csi-target-delete:default

test_name=$(bash openebs-openshift-e2e/utils/generate_test_name testcase=busybox-provision-csi-target-delete metadata="")
echo $test_name

cd cstor-operators/e2e-tests
echo "Running the e2e test for Busybox Deployment.."

cp apps/busybox/deployers/run_e2e_test.yml busybox_csi_target_delete.yml

sed -i -e 's/app: busybox-e2e/app: deploy-busybox-csi-target-delete/g' \
-e 's/app=busybox/app=target-delete/g' \
-e 's/value: statefulset/value: deployment/g' \
-e 's/value: openebs-cstor-csi/value: openebs-cstor-csi/g' \
-e 's/value: openebs-busybox/value: openebs-bb-targetdelete/g' \
-e 's/value: app-busybox-ns/value: csi-target-delete/g' busybox_csi_target_delete.yml
cat busybox_csi_target_delete.yml

bash ../../openebs-openshift-e2e/utils/e2e_job_runner label='app:deploy-busybox-csi-target-delete' job=busybox_csi_target_delete.yml
cd ../..
bash openebs-openshift-e2e/utils/dump_cluster_state;
bash openebs-openshift-e2e/utils/event_updater jobname:csi-target-delete $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
#python3 openebs-openshift-e2e/utils/result/result_update.py $job_id 4CCO06 4-chaos "Induce failure on cstor-target pod and check if it gets scheduled immediately and the application is available" Fail "$current_time" $#gittoken
exit 1;
fi

################
# e2eBook 2 #
################

run_id="target-delete-csi";test_name=$(bash openebs-openshift-e2e/utils/generate_test_name testcase=busybox-liveness metadata=${run_id})
echo $test_name

cd cstor-operators/e2e-tests
# copy the content of deployer run_e2e_test.yml into a different file to update the test specific parameters.
cp apps/busybox/liveness/run_e2e_test.yml busybox_loadgen_csi_target_delete.yml

# Update the environmental variables in e2e job spec.

: << EOF
  ---------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                               |
  ---------------------------------------------------------------------------------------------------------------------|
 | appNamespace      | env    | app-busybox-ns                      | target-delete                                      | 
 | e2e job label  | label  | liveness: e2e-busybox-liveness   | liveness: busybox-liveness-targetdelete            |
 | appLabel          | env    | app=busybox                     | app=target-delete                                     | 
  ----------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/value: app-busybox-ns/value: csi-target-delete/g' \
-e 's/app=busybox/app=target-delete/g' \
-e 's/liveness: e2e-busybox-liveness/liveness: busybox-liveness-csi-targetdelete/g' busybox_loadgen_csi_target_delete.yml

cat busybox_loadgen_csi_target_delete.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' busybox_loadgen_csi_target_delete.yml

# Run the e2e job and get the details of the e2e job from e2e_job_runner utils.
bash ../../openebs-openshift-e2e/utils/e2e_job_runner label='liveness:busybox-liveness-csi-targetdelete' job=busybox_loadgen_csi_target_delete.yml
cd ../..
# Get the cluster state Once the e2e jobs completed.
bash openebs-openshift-e2e/utils/dump_cluster_state;
# Update the e2e event for the job.
bash openebs-openshift-e2e/utils/event_updater jobname:csi-target-delete $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
#python3 openebs-openshift-e2e/utils/result/result_update.py $job_id 4CCO06 4-chaos "Induce failure on cstor-target pod and check if it gets scheduled immediately and the application is available" Fail "$current_time" $#gittoken
exit 1;
fi

################
# e2eBook 3 #
################

# Performing target failure

run_id="delete";test_name=$(bash openebs-openshift-e2e/utils/generate_test_name testcase=openebs-target-failure metadata=${run_id})
echo $test_name

cd cstor-operators/e2e-tests
cp experiments/chaos/openebs_target_failure/run_e2e_test.yml run_csi_target_delete_test.yml

sed -i -e '/name: APP_NAMESPACE/{n;s/.*/            value: csi-target-delete/}' \
-e '/name: APP_LABEL/{n;s/.*/            value: '\''app=target-delete'\''/}' \
-e '/name: CONTAINER_RUNTIME/{n;s/.*/            value: docker/}' \
-e '/name: DEPLOY_TYPE/{n;s/.*/            value: deployment/}' \
-e '/name: TARGET_CONTAINER/{n;s/.*/            value: ""/}' \
-e "/name: TARGET_AFFINITY_CHECK/{n;s/value: 'enable'/value: 'disable'/g}" \
-e '/name: DATA_PERSISTENCE/{n;s/.*/            value: busybox/}' run_csi_target_delete_test.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' run_csi_target_delete_test.yml

## Insert the set of variables for busybox data consistency util into configmap spec.
sed -i '/parameters.yml: |/a \
    blocksize: 4k\
    blockcount: 1024\
    testfile: targetdeletetest
' run_csi_target_delete_test.yml

sed -i -e 's/name: openebs-target-failure/name: openebs-target-delete/g' run_csi_target_delete_test.yml

echo "Running the e2e test for Busybox Deployment Scaleup.."
cat run_csi_target_delete_test.yml

bash ../../openebs-openshift-e2e/utils/e2e_job_runner label='name:openebs-target-delete' job=run_csi_target_delete_test.yml
cd ../..
bash openebs-openshift-e2e/utils/dump_cluster_state;
bash openebs-openshift-e2e/utils/event_updater jobname:csi-target-delete $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
#python3 openebs-openshift-e2e/utils/result/result_update.py $job_id 4CCO06 4-chaos "Induce failure on cstor-target pod and check if it gets scheduled immediately and the application is available" Fail "$current_time" $#gittoken
exit 1;
fi

################
# e2eBook 4 #
################

run_id="deprovision-csi-target-delete";test_name=$(bash openebs-openshift-e2e/utils/generate_test_name testcase=busybox-liveness metadata=${run_id})
echo $test_name

cd cstor-operators/e2e-tests
# copy the content of deployer run_e2e_test.yml into a different file to update the test specific parameters.
cp apps/busybox/liveness/run_e2e_test.yml busybox_loadgen_deprovision_csi_target_delete.yml

# Update the environmental variables in e2e job spec.

: << EOF
  ---------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                               |
  ---------------------------------------------------------------------------------------------------------------------|
 | appNamespace      | env    | app-busybox-ns                      | target-delete                                      | 
 | appLabel          | env    | app=busybox                     | app=target-delete                                  |
 | e2e job label  | label  | liveness: e2e-busybox-liveness   | liveness: busybox-liveness-deprovision-targetdelete|
 | action            | env    | provision                           | deprovision                                      | 
  ----------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/value: app-busybox-ns/value: csi-target-delete/g' \
-e 's/app=busybox/app=target-delete/g' \
-e 's/value: provision/value: deprovision/g' \
-e 's/liveness: e2e-busybox-liveness/liveness: busybox-liveness-deprovision-csi-targetdelete/g' busybox_loadgen_deprovision_csi_target_delete.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' busybox_loadgen_deprovision_csi_target_delete.yml

cat busybox_loadgen_deprovision_csi_target_delete.yml
# Run the e2e job and get the details of the e2e job from e2e_job_runner utils.
bash ../../openebs-openshift-e2e/utils/e2e_job_runner label='liveness:busybox-liveness-deprovision-csi-targetdelete' job=busybox_loadgen_deprovision_csi_target_delete.yml
cd ../..
# Get the cluster state Once the e2e jobs completed.
bash openebs-openshift-e2e/utils/dump_cluster_state;
bash openebs-openshift-e2e/utils/event_updater jobname:csi-target-delete $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

rc_val=$(echo $?)

# Update result of the test case in github mayadata-io/e2e-openshift repository.
if [ "$rc_val" != "0" ]; then
#python3 openebs-openshift-e2e/utils/result/result_update.py $job_id 4CCO06 4-chaos "Induce failure on cstor-target pod and check if it gets scheduled immediately and the application is available" Fail "$current_time" $#gittoken
exit 1;
fi

################
# e2eBook 5 #
################

echo "********Deprovisioning Busybox Application*******"

test_name=$(bash openebs-openshift-e2e/utils/generate_test_name testcase=busybox-deprovision-csi-target-delete metadata="")
echo $test_name

cd cstor-operators/e2e-tests
cp apps/busybox/deployers/run_e2e_test.yml deprovision_csi_target_delete.yml

sed -i -e 's/generateName: e2e-busybox-deploy/generateName: busybox-deprovision-target-delete/g' \
-e 's/app: busybox-e2e/app: busybox-deprovision-csi-target-delete/g' \
-e 's/app=busybox/app=target-delete/g' \
-e 's/value: statefulset/value: deployment/g' \
-e 's/value: openebs-cstor-csi/value: openebs-cstor-csi/g' \
-e 's/value: openebs-busybox/value: openebs-bb-targetdelete/g' \
-e 's/value: app-busybox-ns/value: csi-target-delete/g' \
-e 's/value: provision/value: deprovision/g' deprovision_csi_target_delete.yml

echo "Running the e2e test for Busybox Deployment.."
cat deprovision_csi_target_delete.yml

bash ../../openebs-openshift-e2e/utils/e2e_job_runner label='app:busybox-deprovision-csi-target-delete' job=deprovision_csi_target_delete.yml
cd ../..
bash openebs-openshift-e2e/utils/dump_cluster_state;
bash openebs-openshift-e2e/utils/event_updater jobname:csi-target-delete $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

rc_val=$(echo $?)

# testResult=$(kubectl get e2eresult ${test_name} --no-headers -o custom-columns=:spec.testStatus.result)
current_time=$(eval $time)

if [ "$rc_val" != "0" ]; then
bash openebs-openshift-e2e/utils/e2e-cr jobname:csi-target-delete jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" openebs_version:"$releaseTag" test_result:Fail
#python3 openebs-openshift-e2e/utils/result/result_update.py $job_id 4CCO06 4-chaos "Induce failure on cstor-target pod and check if it gets scheduled immediately and the application is available" Fail "$current_time" $#gittoken
exit 1;
fi

bash openebs-openshift-e2e/utils/e2e-cr jobname:csi-target-delete jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" openebs_version:"$releaseTag" test_result:Pass
#python3 openebs-openshift-e2e/utils/result/result_update.py $job_id 4CCO06 4-chaos "Induce failure on cstor-target pod and check if it gets scheduled immediately and the application is available" Pass "$current_time" $#gittoken

if [ "$rc_val" != "0" ]; then
exit 1;
fi

}

if [ "$1" == "node" ];then
  node $2 $3 $4 $5
else
  pod
fi
