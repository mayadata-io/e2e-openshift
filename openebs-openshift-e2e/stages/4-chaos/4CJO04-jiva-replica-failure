#!/bin/bash

pod() {
sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p $port 'cd e2e-openshift && bash openebs-openshift-e2e/stages/4-chaos/4CJO04-jiva-replica-failure node '"'$CI_JOB_ID'"'' '"'$CI_PIPELINE_ID'"' '"'$CI_COMMIT_SHA'"' '"'$RELEASE_TAG'"'
}

node() {
source ~/.profile
gittoken=$(echo "$github_token")
job_id=$(echo $1)
pipeline_id=$(echo $2)
commit_id=$(echo $3)
releaseTag=$(echo $4)
case_id=4CJO04

time="date"
current_time=$(eval $time)

present_dir=$(pwd)
echo $present_dir

oc adm policy add-scc-to-user anyuid system:serviceaccount:replica-fail-jiva:default

bash openebs-openshift-e2e/utils/e2e-cr jobname:volume-replica-failure-jiva jobphase:Waiting init_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" openebs_version:"$releaseTag"
bash openebs-openshift-e2e/utils/e2e-cr jobname:volume-replica-failure-jiva jobphase:Running

echo "*******Deploying Busybox Application****"

test_name=$(bash openebs-openshift-e2e/utils/generate_test_name testcase=busybox-provision-replica-fail-jiva metadata="") 
echo $test_name

################
# e2eBook 1 #
################

cd jiva-operator/e2e-tests
echo "Running the e2e test for Busybox Deployment.."
cp apps/busybox/deployers/run_e2e_test.yml deploy_run_test_jiva.yml

: << EOF
  ---------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                               |
  ---------------------------------------------------------------------------------------------------------------------|
 | appLabel          | env    | app=busybox                     | app=busybox-rep-fail-jiva                    |
 | appNamespace      | env    | app-busybox-ns                      | replica-fail-jiva                                |   
 | appPVC            | env    | openebs-busybox                     | openebs-busybox-rep-kill                         |
 | storage class     | env    | openebs-jiva-csi                | jiva-csi-sc                             |
 | deploy type       | env    | statefulset                         | deployment                                       |
 | Action            | env    | value: provision                    | value: deprovision                               |
 | e2e Job name   | name   | generateName: e2e-busybox-deploy | generateName: busybox-provision-app-rep-fail-jiva|
 | e2e job label  | label  | app: busybox-e2e                 | app: busybox-replica-failure-jiva                |
  ----------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/imagePullPolicy: Always/imagePullPolicy: IfNotPresent/g' \
-e 's/generateName: e2e-busybox-deploy/generateName: busybox-provision-app-replica-fail-jiva/g' \
-e 's/value: app-busybox-ns/value: replica-fail-jiva/g' \
-e 's/value: openebs-busybox/value: openebs-busybox-rep-kill/g' \
-e 's/app: busybox-e2e/app: busybox-replica-failure-jiva/g' \
-e 's/value: '\''app=busybox'\''/value: '\''app=busybox-rep-fail-jiva'\''/g' \
-e 's/value: openebs-jiva-csi/value: jiva-csi-sc/g' deploy_run_test_jiva.yml

cat deploy_run_test_jiva.yml

bash ../../openebs-openshift-e2e/utils/e2e_job_runner label='app:busybox-replica-failure-jiva' job=deploy_run_test_jiva.yml
cd ../..
bash openebs-openshift-e2e/utils/dump_cluster_state;
bash openebs-openshift-e2e/utils/event_updater jobname:volume-replica-failure-jiva $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
#python3 openebs-openshift-e2e/utils/result/result_update.py $job_id 4CJO04 4-chaos "Fails Jiva Replica and verify successful recovery" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

################
# e2eBook 2 #
################

run_id="jiva-replica-failure";test_name=$(bash openebs-openshift-e2e/utils/generate_test_name testcase=busybox-liveness metadata=${run_id})
echo $test_name

cd jiva-operator/e2e-tests
# copy the content of deployer run_e2e_test.yml into a different file to update the test specific parameters.
cp apps/busybox/liveness/run_e2e_test.yml busybox_loadgen_jiva_replica_failure.yml

# Update the environmental variables in e2e job spec.

: << EOF
  ---------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                               |
  ---------------------------------------------------------------------------------------------------------------------|
 | appNamespace      | env    | app-busybox-ns                      | replica-fail-jiva                                | 
 | e2e job label  | label  | liveness: e2e-busybox-liveness   | liveness: busybox-liveness-jiva-replica-failure  |
 | appLabel          | env    | app=busybox                     | app=busybox-rep-fail-jiva                    | 
  ----------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/value: app-busybox-ns/value: replica-fail-jiva/g' \
-e 's/app=busybox/app=busybox-rep-fail-jiva/g' \
-e 's/liveness: e2e-busybox-liveness/liveness: busybox-liveness-jiva-replica-failure/g' busybox_loadgen_jiva_replica_failure.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' busybox_loadgen_jiva_replica_failure.yml

cat busybox_loadgen_jiva_replica_failure.yml

# Run the e2e job and get the details of the e2e job from e2e_job_runner utils.
bash ../../openebs-openshift-e2e/utils/e2e_job_runner label='liveness:busybox-liveness-jiva-replica-failure' job=busybox_loadgen_jiva_replica_failure.yml
cd ../..
# Get the cluster state Once the e2e jobs completed.
bash openebs-openshift-e2e/utils/dump_cluster_state;
# Update the e2e event for the job.
bash openebs-openshift-e2e/utils/event_updater jobname:volume-replica-failure-jiva $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
#python3 openebs-openshift-e2e/utils/result/result_update.py $job_id 4CJO04 4-chaos "Fails Jiva Replica and verify successful recovery" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

################
# e2eBook 3 #
################

run_id="jiva";test_name=$(bash openebs-openshift-e2e/utils/generate_test_name testcase=openebs-volume-replica-failure metadata=${run_id})
echo $test_name

cd jiva-operator/e2e-tests
cp experiments/chaos/openebs_volume_replica_failure/run_e2e_test.yml run_rep_fail_test_jiva.yml

: << EOF
  ---------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                               |
  ---------------------------------------------------------------------------------------------------------------------|
 | appLabel          | env    | name=percona                        | app=busybox-rep-fail-jiva                        | 
 | appPVC            | env    | value: percona-mysql-claim          | value: openebs-busybox-rep-kill                  |
 | appNamespace      | env    | app-percona-ns                      | replica-fail-jiva                            | 
  ----------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/name=percona/app=busybox-rep-fail-jiva/g' \
-e 's/value: app-percona-ns/value: replica-fail-jiva/g' \
-e 's/value: percona-mysql-claim/value: openebs-busybox-rep-kill/g' run_rep_fail_test_jiva.yml
-e 's/name: replica-failure/name: replica-failure-jiva/g' \

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' run_rep_fail_test_jiva.yml

## Replace the value of DATA_PERSISTENCE with application name in e2e experiment.
sed -i '/name: DATA_PERSISTENCE/{n;s/.*/            value: busybox/}' run_rep_fail_test_jiva.yml

## Insert the set of variables for busybox data consistency util into configmap spec.
sed -i '/parameters.yml: |/a \
    blocksize: 4k \
    blockcount: 1024 \
    testfile: repfailtest
' run_rep_fail_test_jiva.yml

cat run_rep_fail_test_jiva.yml

bash ../../openebs-openshift-e2e/utils/e2e_job_runner label='name:openebs-volume-replica-failure' job=run_rep_fail_test_jiva.yml
cd ../..
bash openebs-openshift-e2e/utils/dump_cluster_state;
bash openebs-openshift-e2e/utils/event_updater jobname:volume-replica-failure-jiva $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
#python3 openebs-openshift-e2e/utils/result/result_update.py $job_id 4CJO04 4-chaos "Fails Jiva Replica and verify successful recovery" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi


################
# e2eBook 4 #
################

run_id="deprovision-jiva-replica-failure";test_name=$(bash openebs-openshift-e2e/utils/generate_test_name testcase=busybox-liveness metadata=${run_id})
echo $test_name

cd jiva-operator/e2e-tests
# copy the content of deployer run_e2e_test.yml into a different file to update the test specific parameters.
cp apps/busybox/liveness/run_e2e_test.yml busybox_loadgen_deprovision_jiva_replica_failure.yml

# Update the environmental variables in e2e job spec.

: << EOF
  ---------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                               |
  ---------------------------------------------------------------------------------------------------------------------|
 | appNamespace      | env    | app-busybox-ns                      | replica-fail-jiva                                | 
 | appLabel          | env    | app=busybox                     | app=busybox-rep-fail-jiva                    |
 | e2e job label  | label  | liveness: e2e-busybox-liveness   | liveness: busybox-liveness-deprovision-jiva-replica-failure   |
 | action            | env    | provision                           | deprovision                                      | 
  ----------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/value: app-busybox-ns/value: replica-fail-jiva/g' \
-e 's/app=busybox/app=busybox-rep-fail-jiva/g' \
-e 's/value: provision/value: deprovision/g' \
-e 's/generateName: e2e-busybox-liveness/generateName: busybox-liveness-dep-jiva-replica-failure/g' \
-e 's/liveness: e2e-busybox-liveness/liveness: busybox-liveness-deprovision-jiva-replica-failure/g' busybox_loadgen_deprovision_jiva_replica_failure.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' busybox_loadgen_deprovision_jiva_replica_failure.yml

cat busybox_loadgen_deprovision_jiva_replica_failure.yml
# Run the e2e job and get the details of the e2e job from e2e_job_runner utils.
bash ../../openebs-openshift-e2e/utils/e2e_job_runner label='liveness:busybox-liveness-deprovision-jiva-replica-failure' job=busybox_loadgen_deprovision_jiva_replica_failure.yml
cd ../..
# Get the cluster state Once the e2e jobs completed.
bash openebs-openshift-e2e/utils/dump_cluster_state;
bash openebs-openshift-e2e/utils/event_updater jobname:volume-replica-failure-jiva $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

rc_val=$(echo $?)

# Update result of the test case in github mayadata-io/e2e-openshift repository.
if [ "$rc_val" != "0" ]; then
#python3 openebs-openshift-e2e/utils/result/result_update.py $job_id 4CJO04 4-chaos "Fails Jiva Replica and verify successful recovery" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

################
# e2eBook 5 #
################

echo "********Deprovisioning Busybox Application*******"

test_name=$(bash openebs-openshift-e2e/utils/generate_test_name testcase=busybox-deprovision-replica-fail-jiva metadata="")
echo $test_name
cd jiva-operator/e2e-tests
cp apps/busybox/deployers/run_e2e_test.yml deprovision_rep_fail_jiva.yml

: << EOF
  ---------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                                 |
  ---------------------------------------------------------------------------------------------------------------------  |
 | appLabel          | env    | app=busybox                     | app=busybox-replica-fail-jiva                      | 
 | appNamespace      | env    | app-busybox-ns                      | replica-fail-jiva                                  |   
 | storage clas      | env    | openebs-jiva-csi                | jiva-csi-sc                               |
 | deploy type       | env    | statefulset                         | deployment                                         |
 | Action            | env    | value: provision                    | value: deprovision                                 |
 | e2e Job name   | name   | generateName: e2e-busybox-deploy | generateName: busybox-deprovision-app-rep-fail-jiva|
 | e2e job label  | label  | app: busybox-e2e                 | app: busybox-deprovision-rep-fail                  |
  ----------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/generateName: e2e-busybox-deploy/generateName: busybox-deprovision-app-replica-fail-jiva/g' \
-e 's/value: app-busybox-ns/value: replica-fail-jiva/g' \
-e 's/value: statefulset/value: deployment/g' \
-e 's/value: openebs-busybox/value: openebs-busybox-rep-kill/g' \
-e 's/app: busybox-e2e/app: busybox-deprovision-rep-fail/g' \
-e 's/value: '\''app=busybox'\''/value: '\''app=busybox-rep-fail-jiva'\''/g' \
-e 's/value: openebs-jiva-csi/value: jiva-csi-sc/g' \
-e 's/value: provision/value: deprovision/g' deprovision_rep_fail_jiva.yml

cat deprovision_rep_fail_jiva.yml

bash ../../openebs-openshift-e2e/utils/e2e_job_runner label='app:busybox-deprovision-rep-fail' job=deprovision_rep_fail_jiva.yml
cd ../..
bash openebs-openshift-e2e/utils/dump_cluster_state;
bash openebs-openshift-e2e/utils/event_updater jobname:volume-replica-failure-jiva $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

rc_val=$(echo $?)
current_time=$(eval $time)

# testResult=$(kubectl get e2eresult ${test_name} --no-headers -o custom-columns=:spec.testStatus.result)
if [ "$rc_val" != "0" ]; then
bash openebs-openshift-e2e/utils/e2e-cr jobname:volume-replica-failure-jiva jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" openebs_version:"$releaseTag" test_result:Fail
#python3 openebs-openshift-e2e/utils/result/result_update.py $job_id 4CJO04 4-chaos "Fails Jiva Replica and verify successful recovery" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

bash openebs-openshift-e2e/utils/e2e-cr jobname:volume-replica-failure-jiva jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" openebs_version:"$releaseTag" test_result:Pass
#python3 openebs-openshift-e2e/utils/result/result_update.py $job_id 4CJO04 4-chaos "Fails Jiva Replica and verify successful recovery" Pass $pipeline_id "$current_time" $commit_id $gittoken

if [ "$rc_val" != "0" ]; then
exit 1;
fi
}

if [ "$1" == "node" ];then
  node $2 $3 $4 $5
else
  pod
fi
