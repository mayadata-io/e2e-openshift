#!/bin/bash

pod() {
mkdir -p /root/.ssh
touch /root/.ssh/id_rsa
echo "$SSH_KEYS" > /root/.ssh/id_rsa
chmod 600 /root/.ssh/id_rsa
ssh -o StrictHostKeyChecking=no $user@$ip -p $port -i /root/.ssh/id_rsa 'cd e2e-openshift && bash openebs-openshift-e2e/stages/4-chaos/4CCO05-cspc-cstor-pool-kill node '"'$CI_JOB_ID'"'' '"'$CI_PIPELINE_ID'"' '"'$CI_COMMIT_SHA'"' '"'$RELEASE_TAG'"'
}

node() {
job_id=$(echo $1)
pipeline_id=$(echo $2)
commit_id=$(echo $3)
releaseTag=$(echo $4)
source ~/.profile
#gittoken=$(echo "$github_token")
case_id=4CCO05

time="date"
current_time=$(eval $time)

present_dir=$(pwd)
echo $present_dir
bash openebs-openshift-e2e/utils/e2e-cr jobname:cspc-cstor-pool-kill jobphase:Waiting
bash openebs-openshift-e2e/utils/e2e-cr jobname:cspc-cstor-pool-kill jobphase:Running init_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" openebs_version:"$releaseTag"

################
# e2eBook 1 #
################

echo "*******Deploying Busybox Application****"

test_name=$(bash openebs-openshift-e2e/utils/generate_test_name testcase=busybox-provision-cstor-pool-kill metadata="")
echo $test_name
oc adm policy add-scc-to-user anyuid system:serviceaccount:cstor-pool-kill:default

cd cstor-operators/e2e-tests
echo "Running the e2e test for Busybox Deployment.."

cp apps/busybox/deployers/run_e2e_test.yml busybox_cstor_pool_kill.yml

sed -i -e 's/app: busybox-e2e/app: deploy-busybox-cstor-pool-kill/g' \
-e 's/app=busybox/app=cstor-pool-kill/g' \
-e 's/value: statefulset/value: deployment/g' \
-e 's/value: openebs-cstor-csi/value: openebs-cstor-csi/g' \
-e 's/value: openebs-busybox/value: openebs-bb-poolkill/g' \
-e 's/value: app-busybox-ns/value: cstor-pool-kill/g' busybox_cstor_pool_kill.yml
cat busybox_cstor_pool_kill.yml

bash ../../openebs-openshift-e2e/utils/e2e_job_runner label='app:deploy-busybox-cstor-pool-kill' job=busybox_cstor_pool_kill.yml
cd ../..
bash openebs-openshift-e2e/utils/dump_cluster_state;
bash openebs-openshift-e2e/utils/event_updater jobname:cspc-cstor-pool-kill $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
#python3 openebs-openshift-e2e/utils/result/result_update.py $job_id 4CCO05 4-chaos "Induce failure on CSPC cStor pool container(cstor-pool) and check if it is recovered successfully and verify that the application is not impacted" Fail "$current_time" $#gittoken
exit 1;
fi

################
# e2eBook 2 #
################

run_id="cstor-pool-kill";test_name=$(bash openebs-openshift-e2e/utils/generate_test_name testcase=busybox-liveness metadata=${run_id})
echo $test_name

cd cstor-operators/e2e-tests
# copy the content of deployer run_e2e_test.yml into a different file to update the test specific parameters.
cp apps/busybox/liveness/run_e2e_test.yml busybox_loadgen_cstor_pool_kill.yml

sed -i -e 's/value: app-busybox-ns/value: cstor-pool-kill/g' \
-e 's/app=busybox/app=cstor-pool-kill/g' \
-e 's/liveness: e2e-busybox-liveness/liveness: busybox-liveness-cstor-pool-kill/g' busybox_loadgen_cstor_pool_kill.yml

cat busybox_loadgen_cstor_pool_kill.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' busybox_loadgen_cstor_pool_kill.yml

# Run the e2e job and get the details of the e2e job from e2e_job_runner utils.
bash ../../openebs-openshift-e2e/utils/e2e_job_runner label='liveness:busybox-liveness-cstor-pool-kill' job=busybox_loadgen_cstor_pool_kill.yml
cd ../..
# Get the cluster state Once the e2e jobs completed.
bash openebs-openshift-e2e/utils/dump_cluster_state;
# Update the e2e event for the job.
bash openebs-openshift-e2e/utils/event_updater jobname:cspc-cstor-pool-kill $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
#python3 openebs-openshift-e2e/utils/result/result_update.py $job_id 4CCO05 4-chaos "Induce failure on CSPC cStor pool container(cstor-pool) and check if it is recovered successfully and verify that the application is not impacted" Fail "$current_time" $#gittoken
exit 1;
fi

################
# e2eBook 3 #
################

echo "*******Performing CSPC cStor Pool kill**********"

test_name=$(bash openebs-openshift-e2e/utils/generate_test_name testcase=cspc-pool-container-failure metadata="")
echo $test_name

cd cstor-operators/e2e-tests
cp experiments/chaos/cspc_pool_failure/container_failure/run_e2e_test.yml cspc-poolkill.yml

sed -i -e '/name: APP_NAMESPACE/{n;s/.*/            value: cstor-pool-kill/g}' \
-e '/name: APP_LABEL/{n;s/.*/            value: app=cstor-pool-kill/g}' \
-e '/name: APP_PVC/{n;s/.*/            value: openebs-bb-poolkill/g}' \
-e '/name: DATA_PERSISTENCE/{n;s/.*/            value: busybox/}' cspc-poolkill.yml

## Insert the set of variables for busybox data consistency util into configmap spec.
sed -i '/parameters.yml: |/a \
    blocksize: 4k\
    blockcount: 1024\
    testfile: cspcpoolkill
' cspc-poolkill.yml

cat cspc-poolkill.yml

bash ../../openebs-openshift-e2e/utils/e2e_job_runner label='name:cspc-pool-failure' job=cspc-poolkill.yml
cd ../..
bash openebs-openshift-e2e/utils/dump_cluster_state;
bash openebs-openshift-e2e/utils/event_updater jobname:cspc-cstor-pool-kill $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
#python3 openebs-openshift-e2e/utils/result/result_update.py $job_id 4CCO05 4-chaos "Induce failure on cStor pool container(cstor-pool) and check if it is recovered successfully and verify that the application is not impacted" Fail "$current_time" $#gittoken
exit 1;
fi

################
# e2eBook 4 #
################

run_id="deprovision-cstor-pool-kill";test_name=$(bash openebs-openshift-e2e/utils/generate_test_name testcase=busybox-liveness metadata=${run_id})
echo $test_name

cd cstor-operators/e2e-tests
# copy the content of deployer run_e2e_test.yml into a different file to update the test specific parameters.
cp apps/busybox/liveness/run_e2e_test.yml busybox_loadgen_deprovision_cstor_pool_kill.yml

# Update the environmental variables in e2e job spec.

sed -i -e 's/value: app-busybox-ns/value: cstor-pool-kill/g' \
-e 's/app=busybox/app=cstor-pool-kill/g' \
-e 's/value: provision/value: deprovision/g' \
-e 's/liveness: e2e-busybox-liveness/liveness: busybox-liveness-deprovision-cstor-pool-kill/g' busybox_loadgen_deprovision_cstor_pool_kill.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' busybox_loadgen_deprovision_cstor_pool_kill.yml

cat busybox_loadgen_deprovision_cstor_pool_kill.yml
# Run the e2e job and get the details of the e2e job from e2e_job_runner utils.
bash ../../openebs-openshift-e2e/utils/e2e_job_runner label='liveness:busybox-liveness-deprovision-cstor-pool-kill' job=busybox_loadgen_deprovision_cstor_pool_kill.yml
cd ../..
# Get the cluster state Once the e2e jobs completed.
bash openebs-openshift-e2e/utils/dump_cluster_state;
bash openebs-openshift-e2e/utils/event_updater jobname:cspc-cstor-pool-kill $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

rc_val=$(echo $?)

# Update result of the test case in github mayadata-io/e2e-openshift repository.
if [ "$rc_val" != "0" ]; then
#python3 openebs-openshift-e2e/utils/result/result_update.py $job_id 4CCO05 4-chaos "Induce failure on cStor pool container(cstor-pool) and check if it is recovered successfully and verify that the application is not impacted" Fail "$current_time" $#gittoken
exit 1;
fi

################
# e2eBook 5 #
################

echo "********Deprovisioning Busybox Application*******"

test_name=$(bash openebs-openshift-e2e/utils/generate_test_name testcase=busybox-deprovision-cstor-pool-kill metadata="")
echo $test_name

cd cstor-operators/e2e-tests
cp apps/busybox/deployers/run_e2e_test.yml deprovision_cstor_pool_kill.yml

sed -i -e 's/generateName: e2e-busybox-deploy/generateName: busybox-deprovision-cstor-pool-kill/g' \
-e 's/app: busybox-e2e/app: busybox-deprovision-cstor-pool-kill/g' \
-e 's/app=busybox/app=cstor-pool-kill/g' \
-e 's/value: statefulset/value: deployment/g' \
-e 's/value: openebs-cstor-csi/value: openebs-cstor-disk/g' \
-e 's/value: openebs-busybox/value: openebs-bb-poolkill/g' \
-e 's/value: app-busybox-ns/value: cstor-pool-kill/g' \
-e 's/value: provision/value: deprovision/g' deprovision_cstor_pool_kill.yml

echo "Running the e2e test for Busybox Deployment.."
cat deprovision_cstor_pool_kill.yml

bash ../../openebs-openshift-e2e/utils/e2e_job_runner label='app:busybox-deprovision-cstor-pool-kill' job=deprovision_cstor_pool_kill.yml
cd ../..
bash openebs-openshift-e2e/utils/dump_cluster_state;
bash openebs-openshift-e2e/utils/event_updater jobname:cspc-cstor-pool-kill $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

rc_val=$(echo $?)
current_time=$(eval $time)

if [ "$rc_val" != "0" ]; then
bash openebs-openshift-e2e/utils/e2e-cr jobname:cspc-cstor-pool-kill jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" openebs_version:"$releaseTag" test_result:Fail
#python3 openebs-openshift-e2e/utils/result/result_update.py $job_id 4CCO05 4-chaos "Induce failure on cStor pool container(cstor-pool) and check if it is recovered successfully and verify that the application is not impacted" Fail "$current_time" $#gittoken
exit 1;
fi

bash openebs-openshift-e2e/utils/e2e-cr jobname:cspc-cstor-pool-kill jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" openebs_version:"$releaseTag" test_result:Pass
#python3 openebs-openshift-e2e/utils/result/result_update.py $job_id 4CCO05 4-chaos "Induce failure on cStor pool container(cstor-pool) and check if it is recovered successfully and verify that the application is not impacted" Pass "$current_time" $#gittoken

if [ "$rc_val" != "0" ]; then
exit 1;
fi
}

if [ "$1" == "node" ];then
  node $2 $3 $4 $5
else
  pod
fi
