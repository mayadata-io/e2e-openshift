set -x

pod() {
sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p $port 'cd e2e-openshift && bash Openshift-EE/pipelines/ElasticSearch/stages/4-chaos/401P-elasticsearch-pod-failure/elasticsearch-pod-failure node '"'$CI_JOB_ID'"'' '"'$CI_PIPELINE_ID'"' '"'$CI_COMMIT_SHA'"'
}

node() {

source ~/.profile
#github token to push the test result into github mayadata-io/e2e-openshift repository.
#This token is set as an env in ~/.profile in the test cluster.
gittoken=$(echo "$github_token")
job_id=$(echo $1) #Gitlab job id obtain from the gitlab env ($CI_JOB_ID).
pipeline_id=$(echo $2) # Gitlab pipeline id obtained from gitlab env ($CI_PIPELINE_ID).
commit_id=$(echo $3) #Gitlab commit id Obtained fron gilab env ($CI_COMMIT_SHA).
case_id=401P #test case ID.

time="date"
current_time=$(eval $time)

present_dir=$(pwd)
echo $present_dir

#Creating e2e custom resource result for the test.
bash Openshift-EE/utils/pooling jobname:pool-kill     # wait till cstor-pool-kill is completed 
bash Openshift-EE/utils/e2e-cr jobname:app-pod-failure jobphase:Running init_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"


################
# LitmusBook 1 #
################

# Performing elasticsearch pod failure

run_id="podfail";test_name=$(bash Openshift-EE/utils/generate_test_name testcase=app-pod-failure metadata=${run_id})
echo $test_name

cd litmus
# copy the content of deployer run_litmus_test.yml into a different file to update the test specific parameters.
cp experiments/chaos/app_pod_failure/run_litmus_test.yml elasticsearch_pod_failure.yml

# Update the environmental variables in litmus job spec.
: << EOF
  ---------------------------------------------------------------------------------------------------------------------    
 | specAttribute       | kind   |         default value                | test specifc value                           |
  --------------------------------------------------------------------------------------------------------------------|
 | Litmus Job name     | name   | generateName: application-pod-failure-| generatName: elasticsearch-app-pod-failure- |
 | Litmus job label    | label  | name: application-pod-failure         | name: elasticsearch-application-pod-failure |
 | appNamespace        | env    | app-jenkins-ns                        | app-esearch-ns                              |
 | appLabel            | label  | app=jenkins-app                       | app=elasticsearch                           |
 | livenessAppLabel    | label  |  ""                                   | liveness=elasticsearch-liveness             |
 | livenessAppNamespace| env    |  ""                                   | app-esearch-ns                              |
 | deploy type         | env    |  deployment                           | statefulset                                 |
  ---------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/generateName: application-pod-failure-/generateName: elasticsearch-app-pod-failure-/g' \  
-e 's/name: application-pod-failure/name:elasticsearch-application-pod-failure/g' \ 
-e 's/value: app-percona-ns/value: app-esearch-ns/g' \
-e 's/value: '\''app=jenkins-app  '\''/value: '\''app=elasticsearch'\''/g' \
-e '/name: LIVENESS_APP_LABEL/!b;n;c\            \ value: "liveness=elasticsearch-liveness"' \
-e '/name: LIVENESS_APP_NAMESPACE/!b;n;c\            \ value: "app-esearch-ns"' \
-e 's/value: deployment/name: statefulset/g' elasticsearch_pod_failure.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' elasticsearch_pod_failure.yml

cat elasticsearch_pod_failure.yml

bash ../Openshift-EE/utils/litmus_job_runner label='name:elasticsearch-application-pod-failure' job=elasticsearch_pod_failure.yml
cd ..
# Get the cluster state Once the litmus jobs completed.
bash Openshift-EE/utils/dump_cluster_state;
# Update the e2e event for the job.
bash Openshift-EE/utils/event_updater jobname:app-pod-failure $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

rc_val=$(echo $?)

# Obtain the status of the test using litmusresult(lr) 
testResult=$(kubectl get litmusresult ${test_name} --no-headers -o custom-columns=:spec.testStatus.result)

if [ "$rc_val" != "0" ]; then
python3 Openshift-EE/utils/result/result_update.py $job_id 401P 4-chaos "Check for elasticsearch application pod failure" $testResult $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

current_time=$(eval $time)
# Update the e2e cr once the job is completed
bash Openshift-EE/utils/e2e-cr jobname:app-pod-failure jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" test_result:"$testResult"
python3 Openshift-EE/utils/result/result_update.py $job_id 401P 4-chaos "Check for elasticsearch application pod failure" $testResult $pipeline_id "$current_time" $commit_id $gittoken

if [ "$rc_val" != "0" ]; then
exit 1;
fi

}

if [ "$1" == "node" ];then
  node $2 $3 $4
else
  pod
fi

