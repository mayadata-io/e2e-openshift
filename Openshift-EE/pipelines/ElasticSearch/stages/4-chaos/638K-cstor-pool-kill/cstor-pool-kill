#!/bin/bash
set -x

pod() {
sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p $port 'cd e2e-openshift && bash Openshift-EE/pipelines/ElasticSearch/stages/4-chaos/638K-cstor-pool-kill/cstor-pool-kill node '"'$CI_JOB_ID'"'' '"'$CI_PIPELINE_ID'"' '"'$CI_COMMIT_SHA'"'
}

node() {
source ~/.profile
#github token to push the test result into github mayadata-io/e2e-openshift repository.
#This token is set as an env in ~/.profile in the test cluster.
gittoken=$(echo "$github_token")
job_id=$(echo $1) #Gitlab job id obtain from the gitlab env ($CI_JOB_ID).
pipeline_id=$(echo $2) # Gitlab pipeline id obtained from gitlab env ($CI_PIPELINE_ID).
commit_id=$(echo $3) #Gitlab commit id Obtained fron gilab env ($CI_COMMIT_SHA).
case_id=IOWW #test case ID.

time="date"
current_time=$(eval $time)

present_dir=$(pwd)
echo $present_dir

#Creating e2e custom resource result for the test.

bash Openshift-EE/utils/pooling jobname:pool-delete    #wait till completion of cstor-pool-delete
bash Openshift-EE/utils/e2e-cr jobname:pool-kill jobphase:Running init_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"


################
# LitmusBook 1 #
################

# Performing cStor Pool kill
# testcase for cStor Pool kill is derived from litmus job test_vars.yml
run_id="kill";test_name=$(bash Openshift-EE/utils/generate_test_name testcase=openebs-pool-failure metadata=${run_id})
echo $test_name

cd litmus
cp experiments/chaos/openebs_pool_failure/run_litmus_test.yml cstor_pool_kill.yml

# Update the environmental variables in litmus job spec.
: << EOF
  ---------------------------------------------------------------------------------------------------------------------    
 | specAttribute       | kind   |         default value             | test specifc value                              |
  --------------------------------------------------------------------------------------------------------------------|
 | Litmus Job name     | name   | generateName: openebs-pool-failure| generateName: openebs-cstor-pool-kill           |
 | Litmus job label    | label  | name: openebs-pool-failure        | name: litmus-openebs-pool-kill                  |
 | ImagePullPolicy     | value  | Always                            | IfNotPresent                                    |
 | appNamespace        | env    | app-percona-ns                    | app-esearch-ns                                  |
 | appLabel            | label  | name=percona                      | name=elasticsearch                              |
 | pvcName             | name   | percona-mysql-claim               | openebs-esearch-elasticsearch-logging-0         |                             
 | livenessAppLabel    | label  |  ""                               | liveness=elasticsearch-liveness                 |
 | livenessAppNamespace| env    |  ""                               | app-esearch-ns                                  |
  ---------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/generateName: openebs-pool-failure-/generateName: openebs-cstor-pool-kill-/g' \  
-e 's/name: openebs-pool-failure/name: litmus-openebs-pool-kill/g' \ 
-e 's/imagePullPolicy: Always/imagePullPolicy: IfNotPresent/g' \
-e 's/value: app-percona-ns/value: app-esearch-ns/g' \
-e 's/value: '\''name=percona'\''/value: '\''name=elasticsearch'\''/g' \
-e 's/value: percona-mysql-claim/value: openebs-esearch-elasticsearch-logging-0/g' \
-e '/name: LIVENESS_APP_LABEL/!b;n;c\            \ value: "liveness=elasticsearch-liveness"' \
-e '/name: LIVENESS_APP_NAMESPACE/!b;n;c\            \ value: "app-esearch-ns"' \
-e 's/pool-kill/cstor-pool-kill/g' \
-e 's/enable//g' cstor_pool_kill.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' cstor_pool_kill.yml

cat cstor_pool_kill.yml

bash ../Openshift-EE/utils/litmus_job_runner label='name:litmus-openebs-pool-kill' job=cstor_pool_kill.yml
cd ..
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:pool-kill $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

rc_val=$(echo $?)

# Obtain the status of the test using litmusresult(lr) 
testResult=$(kubectl get litmusresult ${test_name} --no-headers -o custom-columns=:spec.testStatus.result)

if [ "$rc_val" != "0" ]; then
python3 Openshift-EE/utils/result/result_update.py $job_id 638K 4-chaos "Induce failure on cStor pool container(cstor-pool) and check if it is recovered successfully and verify that the application is not impacted" $testResult $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

current_time=$(eval $time)
# Update the e2e cr once the job is completed
bash Openshift-EE/utils/e2e-cr jobname:pool-kill jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" test_result:$testResult

python3 Openshift-EE/utils/result/result_update.py $job_id 638K 4-chaos "Induce failure on cStor pool container(cstor-pool) and check if it is recovered successfully and verify that the application is not impacted" $testResult $pipeline_id "$current_time" $commit_id $gittoken

if [ "$rc_val" != "0" ]; then
exit 1;
fi

}

if [ "$1" == "node" ];then
  node $2 $3 $4
else
  pod
fi
