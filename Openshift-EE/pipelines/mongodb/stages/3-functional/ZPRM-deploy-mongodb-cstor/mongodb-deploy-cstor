#!/bin/bash
set -x

pod() {
sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p $port 'oc adm policy add-scc-to-user anyuid system:serviceaccount:app-mongo-ns-cstor:default' 
sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p $port 'cd e2e-openshift && bash Openshift-EE/pipelines/mongodb/stages/3-functional/ZPRM-deploy-mongodb-cstor/mongodb-deploy-cstor node '"'$CI_JOB_ID'"'' '"'$CI_PIPELINE_ID'"' '"'$CI_COMMIT_SHA'"'
}

node() {

#Gitlab job id obtain from the gitlab env ($CI_JOB_ID).
job_id=$1

# Gitlab pipeline id obtained from gitlab env ($CI_PIPELINE_ID).
pipeline_id=$2 

#Gitlab commit id Obtained fron gilab env ($CI_COMMIT_SHA).
commit_id=$3 

#test case ID.
case_id=ZPRM

#github token to push the test result into github mayadata-io/e2e-openshift repository.
#This token is set as an env in ~/.profile file in the test cluster.
source ~/.profile
gitToken=$github_token

time="date"
current_time=$(eval $time)

present_dir=$(pwd)
echo $present_dir

#Creating e2e custom resource result for the test.
bash Openshift-EE/utils/e2e-cr jobname:deploy-mongodb-cstor jobphase:Waiting
bash Openshift-EE/utils/e2e-cr jobname:deploy-mongodb-cstor jobphase:Running init_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

################
# LitmusBook 1 #
################

#### Deploying mongodb application

test_name=$(bash Openshift-EE/utils/generate_test_name testcase=mongodb-deployment metadata="")
echo $test_name

cd litmus
# copy the content of deployer run_litmus_test.yml into a different file to update the test specific parameters.
cp apps/mongodb/deployers/run_litmus_test.yml deploy_mongodb.yml

# Update the environmental variables in litmus job spec.
: << EOF
  --------------------------------------------------------------------------------------------------------------------     
 | specAttribute     | kind   |         default value               | test specifc value                              |
  ------------------------------------------------------------------------------------------------------------------- |
 | appLabel          | env    | app=mongo                           | app=mongo                                       |
 | pvcName           | env    | openebs-mongo                       | openebs-mongo                                   | 
 | storage clas      | env    | openebs-mongodb                     | openebs-cstor-xfs                               |
 | appNamespace      | env    | app-mongo-ns                        | app-mongo-ns-cstor                              |
  ---------------------------------------------------------------------------------------------------------------------
EOF
# Replacing the storage class in the deployer

sed -i -e 's/value: openebs-mongodb/value: openebs-cstor-xfs/g' \
-e 's/value: app-mongo-ns/value: app-mongo-ns-cstor/g' deploy_mongodb.yml

cat deploy_monodb.yml

# Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../Openshift-EE/utils/litmus_job_runner label='app:mongodb-deployment-litmus' job=deploy_mongodb.yml
cd ..

# Get the cluster state Once the litmus jobs completed.
bash Openshift-EE/utils/dump_cluster_state;
# Update the e2e event for the job.
bash Openshift-EE/utils/event_updater jobname:deploy-mongodb-cstor $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"
rc_val=$(echo $?)
# Obtain the status of the test using litmusresult(lr) 
testResult=$(kubectl get litmusresult ${test_name} --no-headers -o custom-columns=:spec.testStatus.result)

# Update result of the test case in github mayadata-io/e2e-openshift repository.
if [ "$rc_val" != "0" ]; then
python3 Openshift-EE/utils/result/result_update.py $job_id $case_id 3-functional "Check if the mongodb is created successfully" $testResult $pipeline_id "$current_time" $commit_id $gitToken
exit 1;
fi


# Update the e2e cr once the job is completed
bash Openshift-EE/utils/e2e-cr jobname:deploy-mongodb-cstor jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" test_result:$testResult

python3 Openshift-EE/utils/result/result_update.py $job_id $case_id 3-functional "Check if the mongodb is created successfully" $testResult $pipeline_id "$current_time" $commit_id $gitToken

if [ "$rc_val" != "0" ]; then
exit 1;
fi

}

if [ "$1" == "node" ];then
  node $2 $3 $4
else
  pod
fi
