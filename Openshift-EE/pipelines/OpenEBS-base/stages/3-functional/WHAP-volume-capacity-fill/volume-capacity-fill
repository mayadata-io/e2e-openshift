#!/bin/bash


pod() {
mkdir -p /root/.ssh
touch /root/.ssh/id_rsa
echo "$SSH_KEYS" > /root/.ssh/id_rsa
chmod 600 /root/.ssh/id_rsa
ssh -o StrictHostKeyChecking=no $user@$ip -p $port -i /root/.ssh/id_rsa 'cd e2e-openshift && bash Openshift-EE/pipelines/OpenEBS-base/stages/3-functional/WHAP-volume-capacity-fill/volume-capacity-fill node '"'$CI_JOB_ID'"'' '"'$CI_PIPELINE_ID'"' '"'$CI_COMMIT_SHA'"' '"'$RELEASE_TAG'"'
}

node() {
source ~/.profile
gittoken=$(echo "$github_token")
job_id=$(echo $1)
pipeline_id=$(echo $2)
commit_id=$(echo $3)
releaseTag=$(echo $4)
case_id=WHAP

time="date"
current_time=$(eval $time)

present_dir=$(pwd)
echo $present_dir

oc adm policy add-scc-to-user anyuid system:serviceaccount:app-percona-ns:default
bash Openshift-EE/utils/e2e-cr jobname:volume-capacity-fill jobphase:Waiting init_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" openebs_version:"$releaseTag"
bash Openshift-EE/utils/e2e-cr jobname:volume-capacity-fill jobphase:Running

##Deploying Percona Application

test_name=$(bash Openshift-EE/utils/generate_test_name testcase=percona-deployment metadata="") 
echo $test_name

################
# e2eBook 1 #
################

cd e2e-tests
cp apps/percona/deployers/run_e2e_test.yml deploy_run_test_percona.yml

: << EOF
  ---------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                               |
  ---------------------------------------------------------------------------------------------------------------------|
 | storage class     | env    | openebs-cstor-sparse                | openebs-jiva-standalone                          |
  ----------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/value: openebs-standard/value: openebs-cstor-disk/g' \
-e '/name: TARGET_AFFINITY/{n;s/value: ""/value: cstor/g}' deploy_run_test_percona.yml

cat deploy_run_test_percona.yml

bash ../Openshift-EE/utils/e2e_job_runner label='app:percona-deployment' job=deploy_run_test_percona.yml
cd ..
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:volume-capacity-fill  $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
python3 Openshift-EE/utils/result/result_update.py $job_id WHAP 3-functional "Fill cstor volume completely and check if its size can be scaled seamlessly" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

####Fill cstor volume capacity

test_name=$(bash Openshift-EE/utils/generate_test_name testcase=volume-capacity metadata="")
echo $test_name

################
# e2eBook 2 #
################

cd e2e-tests
cp experiments/functional/volume-capacity/run_e2e_test.yml volume_capacity_fill.yaml

: << EOF
  ---------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                               |
  ---------------------------------------------------------------------------------------------------------------------|
 | appLabel          | env    | app=busybbox                        | name=percona                                     | 
 | appNamespace      | env    | app-busybox-ns                      | app-percona-ns                                   | 
  ----------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/app-busybox-ns/app-percona-ns/g' \
-e 's/app=busybox/name=percona/g' volume_capacity_fill.yaml

cat volume_capacity_fill.yaml

bash ../Openshift-EE/utils/e2e_job_runner label='app:volume-capacity' job=volume_capacity_fill.yaml
cd ..
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:volume-capacity-fill $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
python3 Openshift-EE/utils/result/result_update.py $job_id WHAP 3-functional "Fill cstor volume completely and check if its size can be scaled seamlessly" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

####Deprovisioning percona Application

run_id="deprovision";test_name=$(bash Openshift-EE/utils/generate_test_name testcase=percona-deployment metadata=${run_id})
echo $test_name

################
# e2eBook 3 #
################

cd e2e-tests
cp apps/percona/deployers/run_e2e_test.yml deprovision_run_test_percona.yml

: << EOF
  ---------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                               |
  ---------------------------------------------------------------------------------------------------------------------|
 | storage class     | env    | openebs-cstor-sparse                | openebs-jiva-standalone                          |
  ----------------------------------------------------------------------------------------------------------------------
EOF
sed -i -e 's/value: openebs-standard/value: openebs-cstor-disk/g' \
-e 's/app: percona-deployment/app: percona-deployment-deprovision/g' \
-e 's/generateName: e2e-percona/generateName: e2e-percona-deprovision/g' \
-e 's/value: provision/value: deprovision/g' deprovision_run_test_percona.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' deprovision_run_test_percona.yml

cat deprovision_run_test_percona.yml

bash ../Openshift-EE/utils/e2e_job_runner label='app:percona-deployment-deprovision' job=deprovision_run_test_percona.yml
cd ..
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:volume-capacity-fill $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"
rc_val=$(echo $?)

# Obtain the status of the test using e2eresult(lr) 
testResult=$(kubectl get e2eresult ${test_name} --no-headers -o custom-columns=:spec.testStatus.result)
current_time=$(eval $time)

if [ "$rc_val" != "0" ]; then
bash Openshift-EE/utils/e2e-cr jobname:volume-capacity-fill jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" openebs_version:"$releaseTag" test_result:$testResult
python3 Openshift-EE/utils/result/result_update.py $job_id WHAP 3-functional "Fill cstor volume completely and check if its size can be scaled seamlessly" $testResult $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

bash Openshift-EE/utils/e2e-cr jobname:volume-capacity-fill jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" openebs_version:"$releaseTag" test_result:$testResult
python3 Openshift-EE/utils/result/result_update.py $job_id WHAP 3-functional "Fill cstor volume completely and check if its size can be scaled seamlessly" $testResult $pipeline_id "$current_time" $commit_id $gittoken

if [ "$rc_val" != "0" ]; then
exit 1;
fi
}

if [ "$1" == "node" ];then
  node $2 $3 $4 $5
else
  pod
fi
