#!/bin/bash
set -x

pod() {
sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p $port 'cd e2e-openshift && bash Openshift-EE/pipelines/OpenEBS-base/stages/3-functional/IFBV-cvr-scaleup/cvr-scaleup node '"'$CI_JOB_ID'"'' '"'$CI_PIPELINE_ID'"' '"'$CI_COMMIT_SHA'"' '"'$RELEASE_TAG'"'
}

node() {
job_id=$(echo $1)
pipeline_id=$(echo $2)
commit_id=$(echo $3)
releaseTag=$(echo $4)
case_id=IFBV

source ~/.profile
gittoken=$(echo "$github_token")

time="date"
current_time=$(eval $time)

present_dir=$(pwd)
echo $present_dir
bash Openshift-EE/utils/pooling jobname:cvr-migration
bash Openshift-EE/utils/e2e-cr jobname:cvr-scaleup jobphase:Running init_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" openebs_version:"$releaseTag"

################
# LitmusBook 1 #
################

test_name=$(bash Openshift-EE/utils/generate_test_name testcase=busybox-provision-cvr-scaleup-ns metadata="")
echo $test_name

cd litmus
echo "Running the litmus test for Busybox Deployment.."
# copy the content of deployer run_litmus_test.yml into a different file to update the test specific parameters.
cp apps/busybox/deployers/run_litmus_test.yml busybox_cvr_scaleup.yml

sed -i -e 's/app: busybox-litmus/app: deploy-busybox-cvr-scaleup/g' \
-e 's/generateName: litmus-busybox-deploy-/generateName: litmus-busybox-deploy-cvr-scaleup-/g' \
-e 's/app=busybox-sts/app=bb-cvr-scaleup/g' \
-e 's/value: statefulset/value: deployment/g' \
-e 's/value: openebs-cstor-sparse/value: openebs-cstor-cvr-scale/g' \
-e 's/value: openebs-busybox/value: openebs-bb-cvr-scaleup/g' \
-e 's/value: app-busybox-ns/value: cvr-scaleup-ns/g' busybox_cvr_scaleup.yml

cat busybox_cvr_scaleup.yml

# Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.

bash ../Openshift-EE/utils/litmus_job_runner label='app:deploy-busybox-cvr-scaleup' job=busybox_cvr_scaleup.yml
cd ..
# Get the cluster state Once the litmus jobs completed.
bash Openshift-EE/utils/dump_cluster_state;
# Update the e2e event for the job.
bash Openshift-EE/utils/event_updater jobname:cvr-scaleup $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
python3 Openshift-EE/utils/result/result_update.py $job_id IFBV 3-functional "Verify the CVR scaled up successfully from one pool to another pool and check the volume status is healthy" $testResult $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

################
# LitmusBook 2 #
################

test_name=$(bash Openshift-EE/utils/generate_test_name testcase=openebs-cvr-scaleup metadata="")
echo $test_name

cd litmus
# copy the content of deployer run_litmus_test.yml into a different file to update the test specific parameters.
cp experiments/functional/cvr-scaleup/run_litmus_test.yml cvr_scaleup.yml

 # Update the environmental variables in litmus job spec.

sed -i -e '/name: SPC_NAME/{n;s/.*/            value: cstor-block-disk-pool-stripe/}' \
-e '/name: OPENEBS_VERSION/{n;s/.*/            value: '"'$releaseTag'"'/}' \
-e '/name: APP_PVC/{n;s/.*/            value: openebs-bb-cvr-scaleup/}' \
-e '/name: APP_LABEL/{n;s/.*/            value: 'app=bb-cvr-scaleup'/}' \
-e '/name: APP_NAMESPACE/{n;s/.*/            value: cvr-scaleup-ns/}' \
-e '/name: DATA_PERSISTENCE/{n;s/.*/            value: busybox/}' \
-e 's/name: cvr-scaleup/name: cvr-scaleup-configmap/g' cvr_scaleup.yml

cat  cvr_scaleup.yml
 # Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../Openshift-EE/utils/litmus_job_runner label='app:cvr-scaleup' job=cvr_scaleup.yml
cd ..
# Get the cluster state Once the litmus jobs completed.
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:cvr-scaleup $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

return_count=$?

testResult=$(kubectl get litmusresult ${test_name} --no-headers -o custom-columns=:spec.testStatus.result)
current_time=$(eval $time)

if [ "$return_count" != "0" ]; then
bash Openshift-EE/utils/e2e-cr jobname:cvr-scaleup jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" openebs_version:"$releaseTag" test_result:$testResult
python3 Openshift-EE/utils/result/result_update.py $job_id IFBV 3-functional "Verify the CVR scaled up successfully from one pool to another pool and check the volume status is healthy" $testResult $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

bash Openshift-EE/utils/e2e-cr jobname:cvr-scaleup jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" openebs_version:"$releaseTag" test_result:$testResult
python3 Openshift-EE/utils/result/result_update.py $job_id IFBV 3-functional "Verify the CVR scaled up successfully from one pool to another pool and check the volume status is healthy" $testResult $pipeline_id "$current_time" $commit_id $gittoken

if [ "$return_count" != "0" ]; then
exit 1;
fi

}

if [ "$1" == "node" ];then
  node $2 $3 $4 $5
else
  pod
fi
