#!/bin/bash
set -x

pod() {
echo $CI_JOB_ID
###clone e2e-openshift-repo
echo "cloning e2e-openshift repo*************"
#sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p $port 'git clone -b OpenEBS-base https://github.com/openebs/e2e-openshift.git'
sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p $port 'cd e2e-openshift && bash Openshift-EE/pipelines/OpenEBS-base/stages/3-functional/9AKX-snapshot/snapshot node '"'$CI_JOB_ID'"'' '"'$CI_PIPELINE_ID'"' '"'$CI_COMMIT_SHA'"'
}

node() {
job_id=$(echo $1)
pipeline_id=$(echo $2)
commit_id=$(echo $3)
case_id=9AKX

source ~/.profile
gittoken=$(echo "$github_token")

time="date"
current_time=$(eval $time)

present_dir=$(pwd)
echo $present_dir

bash Openshift-EE/utils/e2e-cr jobname:snapshot jobphase:Waiting
bash Openshift-EE/utils/e2e-cr jobname:snapshot jobphase:Running init_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"
bash Openshift-EE/utils/e2e-cr jobname:snapshot-clone jobphase:Waiting
bash Openshift-EE/utils/e2e-cr jobname:clone-different-capacity jobphase:Waiting
bash Openshift-EE/utils/e2e-cr jobname:clone-parent-volume-delete jobphase:Waiting

##Deploying Busybox Application

test_name=$(bash Openshift-EE/utils/generate_test_name testcase=busybox-provision-busybox-snap metadata="")
echo $test_name

cd litmus
echo "Running the litmus test for Busybox Deployment.."
cp apps/busybox/deployers/run_litmus_test.yml deploy_snapshot_test.yml

: << EOF
  ---------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                               |
 --------------------------------------------------------------------------------------------------------------------- |
 | Litmus job label  | label  | app: busybox-litmus                 | app: deploy-busybox-snapshot                     |
 | appLabel          | env    | app=busybox-sts                     | app=busybox-snap                                 |
 | deploy type       | env    | statefulset                         | deployment                                       |
 | imagePullPolicy   | image  | Always                              | IfNotPresent                                     |
 | appPVC            | env    | openebs-busybox                     | busybox-snapshot                                 |
 | storage class     | env    | openebs-cstor-sparse                | openebs-cstor-disk                               |
 | appNamespace      | env    | app-busybox-ns                      | busybox-snap                                     | 
  ----------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/app: busybox-litmus/app: deploy-busybox-snapshot/g' \
-e 's/app=busybox-sts/app=busybox-snap/g' \
-e 's/value: statefulset/value: deployment/g' \
-e 's/imagePullPolicy: Always/imagePullPolicy: IfNotPresent/g' \
-e 's/value: openebs-busybox/value: busybox-snapshot/g' \
-e 's/value: openebs-cstor-sparse/value: openebs-cstor-disk/g' \
-e 's/value: app-busybox-ns/value: busybox-snap/g' deploy_snapshot_test.yml

cat deploy_snapshot_test.yml

bash ../Openshift-EE/utils/litmus_job_runner label='app:deploy-busybox-snapshot' job=deploy_snapshot_test.yml
cd ..
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:snapshot $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
python3 Openshift-EE/utils/result/result_update.py $job_id 9AKX 3-functional "Verify if the snapshot can be created for persistent volume" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

##Deploying loadgen and liveness

################
# LitmusBook 2 #
################

run_id="bb-snap";test_name=$(bash Openshift-EE/utils/generate_test_name testcase=busybox-liveness metadata=${run_id})
echo $test_name

cd litmus
# copy the content of deployer run_litmus_test.yml into a different file to update the test specific parameters.
cp apps/busybox/liveness/run_litmus_test.yml busybox_loadgen_snapshot.yml

 # Update the environmental variables in litmus job spec.

 : << EOF
  ---------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                               |
  ---------------------------------------------------------------------------------------------------------------------|
 | appNamespace      | env    | app-busybox-ns                      |  busybox-snap                                    | 
 | appLabel          | env    | app=busybox-sts                     |  app=busybox-snap                                | 
 | Litmus job label  | label  | liveness: litmus-busybox-liveness   | liveness: bb-liveness-snapshot                   | 
  ----------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/value: app-busybox-ns/value: busybox-snap/g' \
-e 's/app=busybox-sts/app=busybox-snap/g' \
-e 's/liveness: litmus-busybox-liveness/liveness: bb-liveness-snapshot/g' busybox_loadgen_snapshot.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' busybox_loadgen_snapshot.yml

cat busybox_loadgen_snapshot.yml

 # Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../Openshift-EE/utils/litmus_job_runner label='liveness:bb-liveness-snapshot' job=busybox_loadgen_snapshot.yml
cd ..
# Get the cluster state Once the litmus jobs completed.
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:snapshot $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
python3 Openshift-EE/utils/result/result_update.py $job_id 9AKX 3-functional "Verify if the snapshot can be created for persistent volume" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

echo "*******Taking snapshot of BusyBox application**********"

################
# LitmusBook 3 #
################

test_name=$(bash Openshift-EE/utils/generate_test_name testcase=create-snapshot metadata="")
echo $test_name

cd litmus
cp experiments/functional/snapshot-creation/run_litmus_test.yml run_snap_test.yml

sed -i -e 's/value: openebs-busybox/value: busybox-snapshot/g' \
-e 's/value: app-busybox-ns/value: busybox-snap/g' run_snap_test.yml

echo "Running the litmus test for Busybox Deployment Snapshot.."
cat run_snap_test.yml

bash ../Openshift-EE/utils/litmus_job_runner label='app:snapshot-litmus' job=run_snap_test.yml
cd ..
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:snapshot $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"
rc_val=$(echo $?)

# Obtain the status of the test using litmusresult(lr) 
testResult=$(kubectl get litmusresult ${test_name} --no-headers -o custom-columns=:spec.testStatus.result)

if [ "$rc_val" != "0" ]; then
python3 Openshift-EE/utils/result/result_update.py $job_id 9AKX 3-functional "Verify if the snapshot can be created for persistent volume" $testResult $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

#echo "********Deprovisioning Busybox Application*******"

#test_name=$(bash Openshift-EE/utils/generate_test_name testcase=busybox-deprovision-busybox-snap metadata="")
#echo $test_name

#cd litmus
#cp apps/busybox/deployers/run_litmus_test.yml deprovision_snap.yml

#sed -i -e 's/generateName: litmus-busybox-deploy/generateName: busybox-deprovision-snap/g' \
#-e 's/app: busybox-litmus/app: busybox-deprovision-snap/g' \
#-e 's/value: statefulset/value: deployment/g' \
#-e 's/app=busybox-sts/app=busybox-snap/g' \
#-e 's/imagePullPolicy: Always/imagePullPolicy: IfNotPresent/g' \
#-e 's/value: openebs-cstor-sparse/value: openebs-cstor-disk/g' \
#-e 's/value: openebs-busybox/value: busybox-snapshot/g' \
#-e 's/value: app-busybox-ns/value: busybox-snap/g' \
#-e 's/value: provision/value: deprovision/g' deprovision_snap.yml

#echo "Running the litmus test for Busybox Deployment Scaleup.."
#cat deprovision_snap.yml

#bash ../Openshift-EE/utils/litmus_job_runner label='app:busybox-deprovision-snap' job=deprovision_snap.yml
#cd ..
#bash Openshift-EE/utils/dump_cluster_state;
#bash Openshift-EE/utils/event_updater jobname:snapshot $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

#rc_val=$(echo $?)

# testResult=$(kubectl get litmusresult ${test_name} --no-headers -o custom-columns=:spec.testStatus.result)
# if [ "$rc_val" != "0" ]; then
# exit 1;
# fi

current_time=$(eval $time)
bash Openshift-EE/utils/e2e-cr jobname:snapshot jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" test_result:Pass

python3 Openshift-EE/utils/result/result_update.py $job_id 9AKX 3-functional "Verify if the snapshot can be created for persistent volume" $testResult $pipeline_id "$current_time" $commit_id $gittoken

if [ "$rc_val" != "0" ]; then
exit 1;
fi

}

if [ "$1" == "node" ];then
  node $2 $3 $4
else
  pod
fi
