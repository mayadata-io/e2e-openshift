#!/bin/bash
set -x

pod() {
sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p $port 'cd e2e-openshift && bash Openshift-EE/pipelines/OpenEBS-base/stages/3-functional/KUL9-Jiva-sts-App-replica-scaleup/app-replica-scaleup node '"'$CI_JOB_ID'"'' '"'$CI_PIPELINE_ID'"' '"'$CI_COMMIT_SHA'"' '"'$RELEASE_TAG'"'
}

node() {
source ~/.profile
gittoken=$(echo "$github_token")
job_id=$(echo $1)
pipeline_id=$(echo $2)
commit_id=$(echo $3)
releaseTag=$(echo $4)
case_id=KUL9

time="date"
current_time=$(eval $time)

present_dir=$(pwd)
echo $present_dir

bash Openshift-EE/utils/e2e-cr jobname:app-replica-scaleup-jiva jobphase:Waiting init_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" openebs_version:"$releaseTag"
bash Openshift-EE/utils/e2e-cr jobname:app-replica-scaleup-jiva jobphase:Running

##Deploying Busybox-sts Application

test_name=$(bash Openshift-EE/utils/generate_test_name testcase=busybox-provision-app-scale-jiva metadata="") 
echo $test_name

################
# LitmusBook 1 #
################

cd litmus
echo "Running the litmus test for Busybox Deployment.."
cp apps/busybox/deployers/run_litmus_test.yml deploy_run_test_jiva.yml

: << EOF
  ---------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                               |
  ---------------------------------------------------------------------------------------------------------------------|
 | appLabel          | env    | app=busybox-sts                     | app=busybox-scale-jiva                           |
 | appNamespace      | env    | app-busybox-ns                      | app-scale-jiva                                   | 
 | storage class     | env    | openebs-cstor-sparse                | openebs-jiva-standalone                          |
 | Action            | env    | value: provision                    | value: deprovision                               |
 | Litmus Job name   | name   | generateName: litmus-busybox-deploy | generateName: busybox-provision-app-replica      |
 | Litmus job label  | label  | app: busybox-litmus                 | app:busybox-replica-scale-jiva                   |
  ----------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/imagePullPolicy: Always/imagePullPolicy: IfNotPresent/g' \
-e 's/generateName: litmus-busybox-deploy/generateName: busybox-provision-app-replica/g' \
-e 's/value: app-busybox-ns/value: app-scale-jiva/g' \
-e 's/app: busybox-litmus/app: busybox-replica-scale-jiva/g' \
-e 's/value: '\''replicas=2'\''/value: '\''replicas=1'\''/g' \
-e 's/value: '\''app=busybox-sts'\''/value: '\''app=busybox-scale-jiva'\''/g' \
-e 's/value: openebs-cstor-sparse/value: openebs-jiva-standalone/g' deploy_run_test_jiva.yml

cat deploy_run_test_jiva.yml

bash ../Openshift-EE/utils/litmus_job_runner label='app:busybox-replica-scale-jiva' job=deploy_run_test_jiva.yml
cd ..
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:app-replica-scaleup-jiva $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
python3 Openshift-EE/utils/result/result_update.py $job_id KUL9 3-functional "Scale the statefulset application replicas and verify the ring configuration" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

##Deploying loadgen and liveness****"

#################
# LitmusBook 2 #
################

run_id="replica";test_name=$(bash Openshift-EE/utils/generate_test_name testcase=busybox-liveness metadata=${run_id})
echo $test_name

cd litmus
# copy the content of deployer run_litmus_test.yml into a different file to update the test specific parameters.
cp apps/busybox/liveness/run_litmus_test.yml busybox_loadgen_replica_scaleup_jiva.yml

 # Update the environmental variables in litmus job spec.

: << EOF
  ---------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                               |
  ---------------------------------------------------------------------------------------------------------------------|
 | appNamespace      | env    | app-busybox-ns                      | app-scale-jiva                                   | 
 | appLabel          | env    | app=busybox-sts                     | app=busybox-scale-jiva                           | 
 | Litmus job label  | label  | liveness: litmus-busybox-liveness   | liveness: bb-liveness-replica-scaleup            |  
  ----------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/value: app-busybox-ns/value: app-scale-jiva/g' \
-e 's/app=busybox-sts/app=busybox-scale-jiva/g' \
-e 's/liveness: litmus-busybox-liveness/liveness: bb-liveness-replica-scaleup/g' busybox_loadgen_replica_scaleup_jiva.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' busybox_loadgen_replica_scaleup_jiva.yml

cat busybox_loadgen_replica_scaleup_jiva.yml

 # Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../Openshift-EE/utils/litmus_job_runner label='liveness:bb-liveness-replica-scaleup' job=busybox_loadgen_replica_scaleup_jiva.yml
cd ..
# Get the cluster state Once the litmus jobs completed.
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:app-replica-scaleup-jiva $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
python3 Openshift-EE/utils/result/result_update.py $job_id KUL9 3-functional "Scale the statefulset application replicas and verify the ring configuration" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

####Scaling Application replicas

run_id="jiva";test_name=$(bash Openshift-EE/utils/generate_test_name testcase=scale-app-replicas metadata=${run_id})
echo $test_name

################
# LitmusBook 3 #
################

cd litmus
cp experiments/functional/scale_app_replica/run_litmus_test.yml run_scaleup_test_jiva.yml

: << EOF
  ---------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                               |
  ---------------------------------------------------------------------------------------------------------------------|
 | appLabel          | env    | app=cassandra                       | app=busybox-scale-jiva                           | 
 | appNamespace      | env    | app-cass-ns                         | busybox-scale-jiva                               | 
 | Litmus job label  | label  | app: cassandra-scaleup-litmus       | app:  scaleup-litmus-jiva                        |
  ----------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/app: cassandra-scaleup-litmus/app: scaleup-litmus-jiva/g' \
-e 's/value: '\''app=cassandra'\''/value: '\''app=busybox-scale-jiva'\''/g' \
-e 's/value: app-cass-ns/value: app-scale-jiva/g' run_scaleup_test_jiva.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' run_scaleup_test_jiva.yml

###Running the litmus test for Busybox Deployment Scaleup
cat run_scaleup_test_jiva.yml

bash ../Openshift-EE/utils/litmus_job_runner label='app:scaleup-litmus-jiva' job=run_scaleup_test_jiva.yml
cd ..
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:app-replica-scaleup-jiva $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
python3 Openshift-EE/utils/result/result_update.py $job_id KUL9 3-functional "Scale the statefulset application replicas and verify the ring configuration" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

##Deprovisioning loadgen and liveness 

################
# LitmusBook 4 #
################

run_id="dep-replica";test_name=$(bash Openshift-EE/utils/generate_test_name testcase=busybox-liveness metadata=${run_id})
echo $test_name

cd litmus
# copy the content of deployer run_litmus_test.yml into a different file to update the test specific parameters.
cp apps/busybox/liveness/run_litmus_test.yml bb_loadgen_dep_app_scaleup_jiva.yml

 # Update the environmental variables in litmus job spec.

: << EOF
  ---------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                               |
  ---------------------------------------------------------------------------------------------------------------------|
 | appNamespace      | env    | app-busybox-ns                      | app-scale-jiva                                   | 
 | action            | env    | provision                           | deprovision                                      |
 | appLabel          | env    | app=busybox-sts                     | app=busybox-scale-jiva                           |  
 | Litmus job label  | label  | liveness: litmus-busybox-liveness   | liveness: bb-liveness-dep-replica                |
 ----------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/value: app-busybox-ns/value: app-scale-jiva/g' \
-e 's/value: provision/value: deprovision/g' \
-e 's/app=busybox-sts/app=busybox-scale-jiva/g' \
-e 's/generateName: litmus-busybox-liveness/generateName: busybox-liveness-dep-replica/g' \
-e 's/liveness: litmus-busybox-liveness/liveness: bb-liveness-dep-replica/g' bb_loadgen_dep_app_scaleup_jiva.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' bb_loadgen_dep_app_scaleup_jiva.yml

cat bb_loadgen_dep_app_scaleup_jiva.yml
# Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../Openshift-EE/utils/litmus_job_runner label='liveness:bb-liveness-dep-replica' job=bb_loadgen_dep_app_scaleup_jiva.yml
cd ..
# Get the cluster state Once the litmus jobs completed.
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:app-replica-scaleup-jiva $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

rc_val=$(echo $?)

 # Update result of the test case in github mayadata-io/e2e-openshift repository.
if [ "$rc_val" != "0" ]; then
python3 Openshift-EE/utils/result/result_update.py $job_id KUL9 3-functional "Scale the statefulset application replicas and verify the ring configuration" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi



####Deprovisioning Busybox Application

test_name=$(bash Openshift-EE/utils/generate_test_name testcase=busybox-deprovision-app-scale-jiva metadata="")
echo $test_name

################
# LitmusBook 5 #
################

cd litmus
cp apps/busybox/deployers/run_litmus_test.yml deprovision_scaleup_jiva.yml

: << EOF
  ---------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                               |
  ---------------------------------------------------------------------------------------------------------------------|
 | appLabel          | env    | app=busybox-sts                     | app=busybox-scale-jiva                           | 
 | appNamespace      | env    | app-busybox-ns                      | app-scale-jiva                                   | 
 | storage clas      | env    | openebs-cstor-sparse                | openebs-jiva-default                             |
 | deploy type       | env    | statefulset                         | deployment                                       |
 | Action            | env    | value: provision                    | value: deprovision                               |
 | Litmus Job name   | name   | generateName: litmus-busybox-deploy | generateName: busybox-deprovision-target-affinity|
 | Litmus job label  | label  | app: busybox-litmus                 | app: busybox-deprovision-litmus-jiva             |
  ----------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/generateName: litmus-busybox-deploy/generateName: busybox-deprovision-app-replica/g' \
-e 's/value: app-busybox-ns/value: app-scale-jiva/g' \
-e 's/app: busybox-litmus/app: busybox-deprovision-litmus-jiva/g' \
-e 's/value: '\''app=busybox-sts'\''/value: '\''app=busybox-scale-jiva'\''/g' \
-e 's/value: '\''replicas=2'\''/value: '\''replicas=1'\''/g' \
-e 's/value: openebs-cstor-sparse/value: openebs-jiva-standalone/g' \
-e 's/value: provision/value: deprovision/g' deprovision_scaleup_jiva.yml

cat deprovision_scaleup_jiva.yml

bash ../Openshift-EE/utils/litmus_job_runner label='app:busybox-deprovision-litmus-jiva' job=deprovision_scaleup_jiva.yml
cd ..
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:app-replica-scaleup-jiva $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

rc_val=$(echo $?)
current_time=$(eval $time)

# testResult=$(kubectl get litmusresult ${test_name} --no-headers -o custom-columns=:spec.testStatus.result)
if [ "$rc_val" != "0" ]; then
bash Openshift-EE/utils/e2e-cr jobname:app-replica-scaleup-jiva jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" testcaseid:"$case_id" openebs_version:"$releaseTag" test_result:Fail
python3 Openshift-EE/utils/result/result_update.py $job_id KUL9 3-functional "Scale the statefulset application replicas and verify the ring configuration" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

bash Openshift-EE/utils/e2e-cr jobname:app-replica-scaleup-jiva jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" testcaseid:"$case_id" openebs_version:"$releaseTag" test_result:Pass
python3 Openshift-EE/utils/result/result_update.py $job_id KUL9 3-functional "Scale the statefulset application replicas and verify the ring configuration" Pass $pipeline_id "$current_time" $commit_id $gittoken

if [ "$rc_val" != "0" ]; then
exit 1;
fi
}

if [ "$1" == "node" ];then
  node $2 $3 $4 $5
else
  pod
fi
