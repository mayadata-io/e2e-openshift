#!/bin/bash
set -x

pod() {
sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p $port 'cd e2e-openshift && bash Openshift-EE/pipelines/OpenEBS-base/stages/3-functional/5EA0-Backup-Restore-LocalPV/backup-restore-localpv node '"'$CI_JOB_ID'"'' '"'$CI_PIPELINE_ID'"' '"'$CI_COMMIT_SHA'"' '"'$RELEASE_TAG'"'
}

node() {
source ~/.profile
gittoken=$(echo "$github_token")

job_id=$(echo $1)
pipeline_id=$(echo $2)
commit_id=$(echo $3)
releaseTag=$(echo $4)
case_id=5EA0

time="date"
current_time=$(eval $time)

present_dir=$(pwd)
echo $present_dir
oc adm policy add-scc-to-user anyuid system:serviceaccount:percona-backup-localpv:default
bash Openshift-EE/utils/e2e-cr jobname:backup-restore-localpv jobphase:Waiting
bash Openshift-EE/utils/pooling jobname:backup-restore-jiva
bash Openshift-EE/utils/e2e-cr jobname:backup-restore-localpv jobphase:Running init_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" openebs_version:"$releaseTag"

################
# LitmusBook 1 #
################

echo "*******Deploying Percona Application****"

run_id="localpv";test_name=$(bash Openshift-EE/utils/generate_test_name testcase=percona-deployment metadata=${run_id})
echo $test_name

cd litmus
echo "Running the litmus test for Percona Deployment.."

cp apps/percona/deployers/run_litmus_test.yml percona_backup_restore_localpv.yml

sed -i -e 's/app: percona-deployment/app: deploy-percona-backup-restore-localpv/g' \
-e 's/value: openebs-standard/value: openebs-hostpath/g' \
-e 's/value: app-percona-ns/value: backup-percona-localpv/g' percona_backup_restore_localpv.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' percona_backup_restore_localpv.yml

cat percona_backup_restore_localpv.yml

bash ../Openshift-EE/utils/litmus_job_runner label='app:deploy-percona-backup-restore-localpv' job=percona_backup_restore_localpv.yml
cd ..
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:backup-restore-localpv $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
python3 Openshift-EE/utils/result/result_update.py $job_id 5EA0 3-functional "Create backup using velero and verify if it can be successfully restored" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

################
# LitmusBook 2 #
################

echo "*******Performing Backup and Restore on percona Application**********"

run_id="localpv";test_name=$(bash Openshift-EE/utils/generate_test_name testcase=velero-backup-restore metadata=${run_id})
echo $test_name

cd litmus
cp experiments/functional/backup_and_restore/run_litmus_test.yml run_backuprestore_localpv_test.yml

sed -i -e 's/value: app-percona-ns/value: backup-percona-localpv/g' \
-e 's/app: velero-backup-restore/app: velero-backup-restore-localpv/g' \
-e 's/value: "cstor"/value: "localpv"/g' \
-e 's/value: percona-backup/value: percona-backup-localpv/g' run_backuprestore_localpv_test.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' run_backuprestore_localpv_test.yml

echo "Running the litmus test for Percona Backup Restore.."
cat run_backuprestore_localpv_test.yml

bash ../Openshift-EE/utils/litmus_job_runner label='app:velero-backup-restore-localpv' job=run_backuprestore_localpv_test.yml
cd ..
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:backup-restore-localpv $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

rc_val=$(echo $?)
current_time=$(eval $time)

if [ "$rc_val" != "0" ]; then
bash Openshift-EE/utils/e2e-cr jobname:backup-restore-localpv jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" openebs_version:"$releaseTag" test_result:Fail
python3 Openshift-EE/utils/result/result_update.py $job_id 5EA0 3-functional "Create backup using velero and verify if it can be successfully restored" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

bash Openshift-EE/utils/e2e-cr jobname:backup-restore-localpv jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" openebs_version:"$releaseTag" test_result:Pass
python3 Openshift-EE/utils/result/result_update.py $job_id 5EA0 3-functional "Create backup using velero and verify if it can be successfully restored" Pass $pipeline_id "$current_time" $commit_id $gittoken

if [ "$rc_val" != "0" ]; then
exit 1;
fi

}

if [ "$1" == "node" ];then
  node $2 $3 $4 $5
else
  pod
fi