#!/bin/bash
set -x

pod() {
echo $CI_JOB_ID
###clone e2e-openshift-repo
echo "cloning e2e-openshift repo*************"
sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p $port 'git clone -b OpenEBS-base https://github.com/openebs/e2e-openshift.git'
sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p $port 'cd e2e-openshift && bash Openshift-EE/pipelines/OpenEBS-base/stages/3-functional/JAIP-STS-App-Target-Affinity/sts-app-target-affinity node '"'$CI_JOB_ID'"'' '"'$CI_PIPELINE_ID'"' '"'$CI_COMMIT_SHA'"'
}

node() {
source ~/.profile
gittoken=$(echo "$github_token")
job_id=$(echo $1) #Gitlab job id obtain from the gitlab env ($CI_JOB_ID).
pipeline_id=$(echo $2) # Gitlab pipeline id obtained from gitlab env ($CI_PIPELINE_ID).
commit_id=$(echo $3) #Gitlab commit id Obtained fron gilab env ($CI_COMMIT_SHA).
case_id=JAIP  #test case ID.

time="date"
current_time=$(eval $time)

present_dir=$(pwd)
echo $present_dir

#Creating e2e custom resource result for the test.
bash Openshift-EE/utils/e2e-cr jobname:sts-app-target-affinity jobphase:Waiting init_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"
bash Openshift-EE/utils/e2e-cr jobname:sts-app-target-affinity jobphase:Running

echo "*******Deploying Busybox-sts Application****"

################
# LitmusBook 1 #
################

test_name=$(bash Openshift-EE/utils/generate_test_name testcase=busybox-provision-target-affinity metadata="")
echo $test_name

cd litmus
echo "Running the litmus test for Busybox Deployment.."
# copy the content of deployer run_litmus_test.yml into a different file to update the test specific parameters.
cp apps/busybox/deployers/run_litmus_test.yml deploy_affinity_test.yml

# Update the environmental variables in litmus job spec.

 : << EOF
  ---------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                               |
  ---------------------------------------------------------------------------------------------------------------------|
 | imagePullPolicy   | image  | Always                              | IfNotPresent                                     |
 | Litmus job label  | label  | app: busybox-litmus                 | app: busybox-litmus-target                       |
 | appLabel          | env    | app=busybox-sts                     | app=target-affinity                              | 
 | appNamespace      | env    | app-busybox-ns                      | target-affinity                                  | 
 | appReplicas       | env    | 2                                   | 1                                                |
 | appPVC            | env    | openebs-busybox                     | openebs-target-affinity                          |
 | storage class     | env    | openebs-cstor-sparse                | openebs-cstor-disk                               |
  ----------------------------------------------------------------------------------------------------------------------
EOF


sed -i -e 's/imagePullPolicy: Always/imagePullPolicy: IfNotPresent/g' \
-e 's/app: busybox-litmus/app: busybox-litmus-target/g' \
-e 's/value: '\''app=busybox-sts'\''/value: '\''app=target-affinity'\''/g' \
-e 's/value: app-busybox-ns/value: target-affinity/g' \
-e 's/value: '\''replicas=2'\''/value: '\''replicas=1'\''/g' \
-e 's/value: openebs-busybox/value: busybox-target-affinity/g' \
-e 's/value: openebs-cstor-sparse/value: openebs-cstor-disk/g' deploy_affinity_test.yml

cat deploy_affinity_test.yml

# Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../Openshift-EE/utils/litmus_job_runner label='app:busybox-litmus-target' job=deploy_affinity_test.yml
cd ..
# Get the cluster state Once the litmus jobs completed.
bash Openshift-EE/utils/dump_cluster_state;
# Update the e2e event for the job.
bash Openshift-EE/utils/event_updater jobname:app-kill $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

 if [ "$?" != "0" ]; then
python3 Openshift-EE/utils/result/result_update.py $job_id JAIP 4-chaos "Induce application pod failure and check if it is recovered successfully" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

 
echo "*******Deploying loadgen and liveness****"

################
# LitmusBook 2 #
################

 run_id="target-affinity";test_name=$(bash Openshift-EE/utils/generate_test_name testcase=busybox-liveness metadata=${run_id})
echo $test_name

 cd litmus
# copy the content of deployer run_litmus_test.yml into a different file to update the test specific parameters.
cp apps/busybox/liveness/run_litmus_test.yml busybox_loadgen_target_affinity.yml

 # Update the environmental variables in litmus job spec.

 : << EOF
  ---------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                               |
  ---------------------------------------------------------------------------------------------------------------------|
 | appNamespace      | env    | app-busybox-ns                      | target-affinity                                  | 
 | appLabel          | env    | app=busybox-sts                     | app=target-affinity                              | 
 | Litmus job label  | label  | liveness: litmus-busybox-liveness   | liveness: busybox-liveness-target-affinity       | 
  ----------------------------------------------------------------------------------------------------------------------
EOF

 sed -i -e 's/value: app-busybox-ns/value: target-affinity/g' \
-e 's/app=busybox-sts/app=target-affinity/g' \
-e 's/liveness: litmus-busybox-liveness/liveness: busybox-liveness-target-affinity/g' busybox_loadgen_target_affinity.yml

 cat busybox_loadgen_target_affinity.yml

 sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' busybox_loadgen_target_affinity.yml

 # Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../Openshift-EE/utils/litmus_job_runner label='liveness:busybox-liveness-target-affinity' job=busybox_loadgen_target_affinity.yml
cd ..
# Get the cluster state Once the litmus jobs completed.
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:sts-app-target-affinity $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
python3 Openshift-EE/utils/result/result_update.py $job_id JAIP 3-functional "Checking Application and target scheduled on same Node" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

echo "*******Checking Application and Target Pod Affinity **********"

################
# LitmusBook 3 #
################

test_name=$(bash Openshift-EE/utils/generate_test_name testcase=app-target-affinity metadata="")
echo $test_name

cd litmus
cp experiments/functional/app-target-affinity/run_litmus_test.yml run_affinity_test.yml

: << EOF
  ---------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                               |
  ---------------------------------------------------------------------------------------------------------------------|
 | imagePullPolicy   | image  | Always                              | IfNotPresent                                     | 
 | appLabel          | env    | app=busybox-sts                     | app=target-affinity                              |  
 | appNamespace      | env    | app-busybox-ns                      | target-affinity                                  | 
   ----------------------------------------------------------------------------------------------------------------------
EOF


sed -i -e 's/imagePullPolicy: Always/imagePullPolicy: IfNotPresent/g' \
-e 's/value: app=busybox-sts/value: app=target-affinity/g' \
-e 's/value: app-busybox-ns/value: target-affinity/g' run_affinity_test.yml

cat run_affinity_test.yml

bash ../Openshift-EE/utils/litmus_job_runner label='app:litmus-affinity' job=run_affinity_test.yml
cd ..
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:sts-app-target-affinity $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
python3 Openshift-EE/utils/result/result_update.py $job_id JAIP 3-functional "Checking Application and target scheduled on same Node" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

echo "*******************Deprovisioning loadgen and liveness *******************"

################
# LitmusBook 4 #
################

 run_id="deprovision-app-target-affinity";test_name=$(bash Openshift-EE/utils/generate_test_name testcase=busybox-liveness metadata=${run_id})
echo $test_name

 cd litmus
# copy the content of deployer run_litmus_test.yml into a different file to update the test specific parameters.
cp apps/busybox/liveness/run_litmus_test.yml busybox_loadgen_deprovision_target_affinity.yml

 # Update the environmental variables in litmus job spec.

 : << EOF
  ---------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                               |
  ---------------------------------------------------------------------------------------------------------------------|
 | appNamespace      | env    | app-busybox-ns                      | target-affinity                                  | 
 | action            | env    | provision                           | deprovision                                      | 
 | Litmus job label  | label  | liveness: litmus-busybox-liveness   | liveness: busybox-liveness-deprovision-target-affinity  |
 ----------------------------------------------------------------------------------------------------------------------
EOF

 sed -i -e 's/value: app-busybox-ns/value: target-affinity/g' \
-e '/svalue: provision/value: deprovision/g' \
-e 's/liveness: litmus-busybox-liveness/liveness: busybox-liveness-deprovision-target-affinity/g' busybox_loadgen_deprovision_target_affinity.yml

 sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' busybox_loadgen_deprovision_target_affinity.yml

 cat busybox_loadgen_deprovision_target_affinity.yml
# Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../Openshift-EE/utils/litmus_job_runner label='liveness:busybox-liveness-deprovision-target-affinity' job=busybox_loadgen_deprovision_target_affinity.yml
cd ..
# Get the cluster state Once the litmus jobs completed.
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:sts-app-target-affinity $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

 rc_val=$(echo $?)

 # Update result of the test case in github mayadata-io/e2e-openshift repository.
if [ "$rc_val" != "0" ]; then
python3 Openshift-EE/utils/result/result_update.py $job_id JAIP 4-chaos "Induce application pod failure and check if it is recovered successfully" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

echo "********Deprovisioning Busybox Application*******"

 ################
# LitmusBook 5 #
################

test_name=$(bash Openshift-EE/utils/generate_test_name testcase=busybox-deprovision-target-affinity metadata="")
echo $test_name

cd litmus
cp apps/busybox/deployers/run_litmus_test.yml deprovision_affinity.yml

# Update the environmental variables in litmus job spec.

 : << EOF
  ---------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                               |
  ---------------------------------------------------------------------------------------------------------------------|
 | Litmus Job name   | name   | generateName: litmus-busybox-deploy | generatName: litmus-busybox-deprovision          |
 | Litmus job label  | label  | app: busybox-litmus                 | app: busybox-deprovision-target-affinity         |
 | imagePullPolicy   | image  | Always                              | IfNotPresent                                     |
 | appLabel          | env    | app=busybox-sts                     | app=target-affinity                              |  
 | appNamespace      | env    | app-busybox-ns                      | target-affinity                                  | 
 | appPVC            | env    | openebs-busybox                     | busybox-target-affinity                          |
 | storage class     | env    | openebs-cstor-sparse                | openebs-cstor-disk                               |
 | action            | env    | provision                           | deprovison                                       |
  ----------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/generateName: litmus-busybox-deploy/generateName: litmus-busybox-deprovision/g' \
-e 's/app: busybox-litmus/app: busybox-deprovision-target-affinity/g' \
-e 's/imagePullPolicy: Always/imagePullPolicy: IfNotPresent/g' \
-e 's/value: '\''app=busybox-sts'\''/value: '\''app=target-affinity'\''/g' \
-e 's/value: app-busybox-ns/value: target-affinity/g' \
-e 's/value: openebs-busybox/value: busybox-target-affinity/g' \
-e 's/value: openebs-cstor-sparse/value: openebs-cstor-disk/g' \
-e 's/value: provision/value: deprovision/g' deprovision_affinity.yml

echo "Running the litmus test for Busybox Deployment.."
cat deprovision_affinity.yml

bash ../Openshift-EE/utils/litmus_job_runner label='app:busybox-deprovision-affinity' job=deprovision_affinity.yml
cd ..
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:sts-app-target-affinity  $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

rc_val=$(echo $?)

# testResult=$(kubectl get litmusresult ${test_name} --no-headers -o custom-columns=:spec.testStatus.result)
# if [ "$rc_val" != "0" ]; then
# exit 1;
# fi

current_time=$(eval $time)
bash Openshift-EE/utils/e2e-cr jobname:sts-app-target-affinity  jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" test_result:Pass
python3 Openshift-EE/utils/result/result_update.py $job_id JAIP 3-functional "Checking Application and target scheduled on same Node" Pass $pipeline_id "$current_time" $commit_id $gittoken
}

if [ "$1" == "node" ];then
  node $2 $3 $4
else
  pod
fi
