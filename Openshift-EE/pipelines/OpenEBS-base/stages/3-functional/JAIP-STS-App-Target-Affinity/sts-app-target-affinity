#!/bin/bash
set -x

pod() {
sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p $port 'cd e2e-openshift && bash Openshift-EE/pipelines/OpenEBS-base/stages/3-functional/JAIP-STS-App-Target-Affinity/sts-app-target-affinity node '"'$CI_JOB_ID'"'' '"'$CI_PIPELINE_ID'"' '"'$CI_COMMIT_SHA'"' '"'$RELEASE_TAG'"'
}

node() {
source ~/.profile
gittoken=$(echo "$github_token")
job_id=$(echo $1)
pipeline_id=$(echo $2)
commit_id=$(echo $3)
releaseTag=$(echo $4)
case_id=JAIP

time="date"
current_time=$(eval $time)

present_dir=$(pwd)
echo $present_dir

bash Openshift-EE/utils/e2e-cr jobname:sts-app-target-affinity jobphase:Waiting init_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" openebs_version:"$releaseTag"
bash Openshift-EE/utils/e2e-cr jobname:sts-app-target-affinity jobphase:Running


###Deploying Busybox-sts Application

################
# LitmusBook 1 #
################

test_name=$(bash Openshift-EE/utils/generate_test_name testcase=busybox-provision-sts-target-affinity metadata="")
echo $test_name

cd litmus
echo "Running the litmus test for Busybox Deployment.."
cp apps/busybox/deployers/run_litmus_test.yml deploy_sts_affinity_test.yml

: << EOF
  -------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                             |
  -------------------------------------------------------------------------------------------------------------------|
 | appLabel          | env    | app=busybox-sts                     | app=sts-target-affinity                        |
 | pvcName           | env    | openebs-busybox                     | busybox-sts-target-affinity                    | 
 | appNamespace      | env    | app-busybox-ns                      | sts-target-affinity                            | 
 | storage clas      | env    | openebs-cstor-sparse                | openebs-cstor-disk                             |
 | Litmus Job name   | name   | generateName: litmus-busybox-deploy | generateName: busybox-deploy-sts-affinity      |
 | Litmus job label  | label  | app: busybox-litmus                 | app: busybox-sts-target-affinity               |
  --------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/imagePullPolicy: Always/imagePullPolicy: IfNotPresent/g' \
-e 's/app: busybox-litmus/app: busybox-sts-target-affinity/g' \
-e 's/value: '\''app=busybox-sts'\''/value: '\''app=sts-target-affinity'\''/g' \
-e 's/value: app-busybox-ns/value: sts-target-affinity/g' \
-e 's/value: openebs-busybox/value: busybox-sts-target-affinity/g' \
-e 's/value: openebs.io\/target-affinity/value: openebs.io\/sts-target-affinity/g' \
-e 's/generateName: litmus-busybox-deploy/generateName: busybox-deploy-sts-affinity/g' \
-e 's/value: openebs-cstor-sparse/value: openebs-cstor-disk/g' deploy_sts_affinity_test.yml

cat deploy_sts_affinity_test.yml

bash ../Openshift-EE/utils/litmus_job_runner label='app:busybox-sts-target-affinity' job=deploy_sts_affinity_test.yml
cd ..
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:sts-app-target-affinity $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
python3 Openshift-EE/utils/result/result_update.py $job_id JAIP 3-functional "Checking Statefulset Application and target scheduled on same Node" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

####Deploying loadgen and liveness

################
# LitmusBook 2 #
################

run_id="affinity";test_name=$(bash Openshift-EE/utils/generate_test_name testcase=busybox-liveness metadata=${run_id})
echo $test_name

cd litmus
# copy the content of deployer run_litmus_test.yml into a different file to update the test specific parameters.
cp apps/busybox/liveness/run_litmus_test.yml busybox_loadgen_sts_target_affinity.yml

 # Update the environmental variables in litmus job spec.

: << EOF
  ---------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                               |
  ---------------------------------------------------------------------------------------------------------------------|
 | appNamespace      | env    | app-busybox-ns                      | sts-target-affinity                              | 
 | appLabel          | env    | app=busybox-sts                     | app=sts-target-affinity                          | 
 | Litmus job label  | label  | liveness: litmus-busybox-liveness   | liveness: busybox-liveness-target-affinity       | 
  ----------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/value: app-busybox-ns/value: sts-target-affinity/g' \
-e 's/app=busybox-sts/app=sts-target-affinity/g' \
-e 's/liveness: litmus-busybox-liveness/liveness: busybox-liveness-sts-target-affinity/g' busybox_loadgen_sts_target_affinity.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' busybox_loadgen_sts_target_affinity.yml

cat busybox_loadgen_sts_target_affinity.yml
 # Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../Openshift-EE/utils/litmus_job_runner label='liveness:busybox-liveness-sts-target-affinity' job=busybox_loadgen_sts_target_affinity.yml
cd ..
# Get the cluster state Once the litmus jobs completed.
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:sts-app-target-affinity $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
python3 Openshift-EE/utils/result/result_update.py $job_id JAIP 3-functional "Checking Application and target scheduled on same Node" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi


####Checking Application and Target Pod Affinity 

################
# LitmusBook 3 #
################

run_id="statefulset";test_name=$(bash Openshift-EE/utils/generate_test_name testcase=app-target-affinity metadata=${run_id})
echo $test_name

cd litmus
cp experiments/functional/app-target-affinity/run_litmus_test.yml run_sts_affinity_test.yml

: << EOF
  ---------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value                     | test specifc value                         |
  ---------------------------------------------------------------------------------------------------------------------|
 | appLabel          | env    | app=busybox-sts                           | app=sts-target-affinity                    | 
 | appNamespace      | env    | app-busybox-ns                            | sts-target-affinity                        | 
 | Litmus Job name   | name   | generateName: litmus-app-target-affinity- | generateName: litmus-sts-target-affinity-  |
 | Litmus job label  | label  | app: litmus-affinity                      | app: litmus-sts-affinity                   |
  ---------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/imagePullPolicy: Always/imagePullPolicy: IfNotPresent/g' \
-e 's/value: app=busybox-sts/value: app=sts-target-affinity/g' \
-e 's/app: litmus-affinity/app: litmus-sts-affinity/g' \
-e 's/value: deployment/value: statefulset/g' \
-e 's/generateName: litmus-app-target-affinity-/generateName: litmus-sts-target-affinity-/g' \
-e 's/value: app-busybox-ns/value: sts-target-affinity/g' run_sts_affinity_test.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' run_sts_affinity_test.yml

cat run_sts_affinity_test.yml

bash ../Openshift-EE/utils/litmus_job_runner label='app:litmus-sts-affinity' job=run_sts_affinity_test.yml
cd ..
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:sts-app-target-affinity $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
python3 Openshift-EE/utils/result/result_update.py $job_id JAIP 3-functional "Checking Statefulset Application and target scheduled on same Node" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

####Deprovisioning loadgen and liveness 

################
# LitmusBook 4 #
################

run_id="dep-affinity";test_name=$(bash Openshift-EE/utils/generate_test_name testcase=busybox-liveness metadata=${run_id})
echo $test_name

cd litmus
# copy the content of deployer run_litmus_test.yml into a different file to update the test specific parameters.
cp apps/busybox/liveness/run_litmus_test.yml busybox_loadgen_dep_sts_target_affinity.yml

 # Update the environmental variables in litmus job spec.

 : << EOF
  ---------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                               |
  ---------------------------------------------------------------------------------------------------------------------|
 | appNamespace      | env    | app-busybox-ns                      | sts-target-affinity                              | 
 | action            | env    | provision                           | deprovision                                      | 
 | appLabel          | env    | app=busybox-sts                     | app=sts-target-affinity                          | 
 | Litmus job label  | label  | liveness: litmus-busybox-liveness   | liveness: bb-liveness-dep-target-affinity        |
 ----------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/value: app-busybox-ns/value: sts-target-affinity/g' \
-e 's/value: provision/value: deprovision/g' \
-e 's/app=busybox-sts/app=sts-target-affinity/g' \
-e 's/generateName: litmus-busybox-liveness/generateName: busybox-liveness-dep-sts-target-affinity/g' \
-e 's/liveness: litmus-busybox-liveness/liveness: liveness-dep-sts-target-affinity/g' busybox_loadgen_dep_sts_target_affinity.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' busybox_loadgen_dep_sts_target_affinity.yml

cat busybox_loadgen_dep_sts_target_affinity.yml
# Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../Openshift-EE/utils/litmus_job_runner label='liveness:liveness-dep-sts-target-affinity' job=busybox_loadgen_dep_sts_target_affinity.yml
cd ..
# Get the cluster state Once the litmus jobs completed.
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:sts-app-target-affinity $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

rc_val=$(echo $?)

 # Update result of the test case in github mayadata-io/e2e-openshift repository.
if [ "$rc_val" != "0" ]; then
python3 Openshift-EE/utils/result/result_update.py $job_id JAIP 3-functional "Checking Statefulset Application and target scheduled on same Node" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

######Deprovisioning Busybox Application

################
# LitmusBook 5 #
################

test_name=$(bash Openshift-EE/utils/generate_test_name testcase=busybox-deprovision-sts-target-affinity metadata="")
echo $test_name

cd litmus
cp apps/busybox/deployers/run_litmus_test.yml deprovision_sts_affinity.yml

: << EOF
  --------------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                                   |
  -------------------------------------------------------------------------------------------------------------------------|
 | appLabel          | env    | app=busybox-sts                     | app=sts-target-affinity                              |
 | pvcName           | env    | openebs-busybox                     | busybox-sts-target-affinity                          | 
 | appNamespace      | env    | app-busybox-ns                      | sts-target-affinity                                  | 
 | storage clas      | env    | openebs-cstor-sparse                | openebs-cstor-disk                                   |
 | Action            | env    | value: provision                    | value: deprovision                                   |
 | Litmus Job name   | name   | generateName: litmus-busybox-deploy | generateName: busybox-deprovision-sts-target-affinity|
 | Litmus job label  | label  | app: busybox-litmus                 | app: busybox-deprovision-sts-affinity                |
  -------------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/generateName: litmus-busybox-deploy/generateName: busybox-deprovision-sts-target-affinity/g' \
-e 's/app: busybox-litmus/app: busybox-deprovision-sts-affinity/g' \
-e 's/imagePullPolicy: Always/imagePullPolicy: IfNotPresent/g' \
-e 's/value: '\''app=busybox-sts'\''/value: '\''app=sts-target-affinity'\''/g' \
-e 's/value: app-busybox-ns/value: sts-target-affinity/g' \
-e 's/value: openebs.io\/target-affinity/value: openebs.io\/sts-target-affinity/g' \
-e 's/value: openebs-busybox/value: busybox-sts-target-affinity/g' \
-e 's/value: openebs-cstor-sparse/value: openebs-cstor-disk/g' \
-e 's/value: provision/value: deprovision/g' deprovision_sts_affinity.yml

cat deprovision_sts_affinity.yml

bash ../Openshift-EE/utils/litmus_job_runner label='app:busybox-deprovision-sts-affinity' job=deprovision_sts_affinity.yml
cd ..
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:sts-app-target-affinity $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

rc_val=$(echo $?)

# testResult=$(kubectl get litmusresult ${test_name} --no-headers -o custom-columns=:spec.testStatus.result)
if [ "$rc_val" != "0" ]; then
python3 Openshift-EE/utils/result/result_update.py $job_id JAIP 3-functional "Checking Statefulset Application and target scheduled on same Node" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

current_time=$(eval $time)
bash Openshift-EE/utils/e2e-cr jobname:sts-app-target-affinity  jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" testcaseid:"$case_id" openebs_version:"$releaseTag" test_result:Pass
python3 Openshift-EE/utils/result/result_update.py $job_id JAIP 3-functional "Checking Statefulset Application and target scheduled on same Node" Pass $pipeline_id "$current_time" $commit_id $gittoken

if [ "$rc_val" != "0" ]; then
exit 1;
fi

}

if [ "$1" == "node" ];then
  node $2 $3 $4 $5
else
  pod
fi
