#!/bin/bash


pod() {
mkdir -p /root/.ssh
touch /root/.ssh/id_rsa
echo "$SSH_KEYS" > /root/.ssh/id_rsa
chmod 600 /root/.ssh/id_rsa
ssh -o StrictHostKeyChecking=no $user@$ip -p $port -i /root/.ssh/id_rsa 'cd e2e-openshift && bash Openshift-EE/pipelines/OpenEBS-base/stages/3-functional/3JF09-Jiva-snapshot/jiva-snapshot node '"'$CI_JOB_ID'"'' '"'$CI_PIPELINE_ID'"' '"'$CI_COMMIT_SHA'"' '"'$RELEASE_TAG'"'
}

node() {
job_id=$(echo $1)
pipeline_id=$(echo $2)
commit_id=$(echo $3)
releaseTag=$(echo $4)
case_id=3JF09

source ~/.profile
gittoken=$(echo "$github_token")

time="date"
current_time=$(eval $time)

present_dir=$(pwd)
echo $present_dir

bash Openshift-EE/utils/e2e-cr jobname:jiva-snapshot jobphase:Waiting
bash Openshift-EE/utils/e2e-cr jobname:jiva-snapshot jobphase:Running init_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" openebs_version:"$releaseTag"
bash Openshift-EE/utils/e2e-cr jobname:jiva-snapshot-clone jobphase:Waiting

###########Deploying Busybox Application

################
# e2eBook 1 #
################

: << EOF
  --------------------------------------------------------------------------------------------------------------------     
 | specAttribute     | kind   |         default value               | test specifc value                              |
  ------------------------------------------------------------------------------------------------------------------- |
 | e2e job label  | label  | app: busybox-e2e                 | app: deploy-jiva-busybox-snapshot               |
 | e2e Job name   | name   | generateName: e2e-busybox-deploy | generateName: busybox-provision-jiva-snapshot   |
 | appLabel          | env    | app=busybox-sts                     | app=busybox-jiva-snap                           |
 | deploy type       | env    | statefulset                         | deployment                                      |
 | pvcName           | env    | openebs-busybox                     | busybox-jiva-snapshot                           | 
 | storage clas      | env    | openebs-cstor-sparse                | openebs-jiva-standalone                         |
 | appNamespace      | env    | app-busybox-ns                      | busybox-jiva-snap                               |
  ---------------------------------------------------------------------------------------------------------------------
EOF

test_name=$(bash Openshift-EE/utils/generate_test_name testcase=busybox-provision-busybox-jiva-snap metadata="")
echo $test_name

cd e2e-tests
echo "Running the e2e test for Busybox Deployment.."
cp apps/busybox/deployers/run_e2e_test.yml deploy_jiva_snapshot.yml

sed -i -e 's/app: busybox-e2e/app: deploy-jiva-busybox-snapshot/g' \
-e 's/generateName: e2e-busybox-deploy/generateName: busybox-provision-jiva-snapshot/g' \
-e 's/app=busybox-sts/app=busybox-jiva-snap/g' \
-e 's/value: statefulset/value: deployment/g' \
-e 's/imagePullPolicy: Always/imagePullPolicy: IfNotPresent/g' \
-e 's/value: openebs-busybox/value: busybox-jiva-snapshot/g' \
-e 's/value: openebs-cstor-sparse/value: openebs-jiva-standalone/g' \
-e 's/value: app-busybox-ns/value: busybox-jiva-snap/g' deploy_jiva_snapshot.yml

cat deploy_jiva_snapshot.yml

bash ../Openshift-EE/utils/e2e_job_runner label='app:deploy-jiva-busybox-snapshot' job=deploy_jiva_snapshot.yml
cd ..
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:jiva-snapshot $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
python3 Openshift-EE/utils/result/result_update.py $job_id 3JF09 3-functional "Verify if the snapshot can be created for JIVA persistent volume" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

##Deploying loadgen and liveness

#################
# e2eBook 2 #
################

run_id="jiva-snap";test_name=$(bash Openshift-EE/utils/generate_test_name testcase=busybox-liveness metadata=${run_id})
echo $test_name

cd e2e-tests
# copy the content of deployer run_e2e_test.yml into a different file to update the test specific parameters.
cp apps/busybox/liveness/run_e2e_test.yml busybox_loadgen_jiva_snapshot.yml

 # Update the environmental variables in e2e job spec.

 : << EOF
  ---------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                               |
  ---------------------------------------------------------------------------------------------------------------------|
 | appNamespace      | env    | app-busybox-ns                      | busybox-jiva-snap                                |  
 | appLabel          | env    | app=busybox-sts                     | app=busybox-jiva-snap                            | 
 | e2e job label  | label  | liveness: e2e-busybox-liveness   | liveness:bb-liveness-jiva-snapshot               | 
  ----------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/value: app-busybox-ns/value:  busybox-jiva-snap/g' \
-e 's/app=busybox-sts/app=busybox-jiva-snap/g' \
-e 's/liveness: e2e-busybox-liveness/liveness: bb-liveness-jiva-snapshot/g'  busybox_loadgen_jiva_snapshot.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' busybox_loadgen_jiva_snapshot.yml

cat  busybox_loadgen_jiva_snapshot.yml
 # Run the e2e job and get the details of the e2e job from e2e_job_runner utils.
bash ../Openshift-EE/utils/e2e_job_runner label='liveness:bb-liveness-jiva-snapshot' job=busybox_loadgen_jiva_snapshot.yml
cd ..
# Get the cluster state Once the e2e jobs completed.
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:jiva-snapshot $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
python3 Openshift-EE/utils/result/result_update.py $job_id 3JF09 3-functional "Verify if the snapshot can be created for JIVA persistent volume" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

###########Taking snapshot of BusyBox application

################
# e2eBook 3 #
################

: << EOF
  --------------------------------------------------------------------------------------------------------------------     
 | specAttribute     | kind   |         default value               | test specifc value                              |
  ------------------------------------------------------------------------------------------------------------------- |
 | e2e job label  | label  | app: snapshot-e2e                | app: snapshot-jiva-e2e                       |
 | snapshot name     | env    | value: snapshot-busybox             | value: snapshot-jiva-busybox                    |
 | pvcName           | env    | openebs-busybox                     | busybox-jiva-snapshot                           | 
 | appNamespace      | env    | app-busybox-ns                      | busybox-jiva-snap                               |
  ---------------------------------------------------------------------------------------------------------------------
EOF

run_id="jiva";test_name=$(bash Openshift-EE/utils/generate_test_name testcase=create-snapshot metadata=${run_id})
echo $test_name

cd e2e-tests
cp experiments/functional/snapshot-creation/run_e2e_test.yml run_snap_test_jiva.yml

sed -i -e 's/value: openebs-busybox/value: busybox-jiva-snapshot/g' \
-e 's/value: snapshot-busybox/value: snapshot-jiva-busybox/g' \
-e 's/app: snapshot-e2e/app: snapshot-jiva-e2e/g' \
-e 's/value: app-busybox-ns/value: busybox-jiva-snap/g' run_snap_test_jiva.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' run_snap_test_jiva.yml

cat run_snap_test_jiva.yml

bash ../Openshift-EE/utils/e2e_job_runner label='app:snapshot-jiva-e2e' job=run_snap_test_jiva.yml
cd ..
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:jiva-snapshot $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"
rc_val=$(echo $?)
current_time=$(eval $time)

if [ "$rc_val" != "0" ]; then
bash Openshift-EE/utils/e2e-cr jobname:jiva-snapshot jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" testcaseid:"$case_id" openebs_version:"$releaseTag" test_result:Fail
python3 Openshift-EE/utils/result/result_update.py $job_id 3JF09 3-functional "Verify if the snapshot can be created for JIVA persistent volume" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

bash Openshift-EE/utils/e2e-cr jobname:jiva-snapshot jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" testcaseid:"$case_id" openebs_version:"$releaseTag" test_result:Pass

python3 Openshift-EE/utils/result/result_update.py $job_id 3JF09 3-functional "Verify if the snapshot can be created for JIVA persistent volume" Pass $pipeline_id "$current_time" $commit_id $gittoken

if [ "$rc_val" != "0" ]; then
exit 1;
fi

}

if [ "$1" == "node" ];then
  node $2 $3 $4 $5
else
  pod
fi
