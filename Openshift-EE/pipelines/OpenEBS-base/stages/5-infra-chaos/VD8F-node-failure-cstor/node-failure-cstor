#!/bin/bash


pod() {
### Drain the node to run infra chaos test scripts
echo "******* Drain node for maintainence ********"

node_name=$(sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p $port kubectl get nodes | grep compute | awk 'FNR==1 {print $1}')

echo $node_name
sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p $port 'cd e2e-openshift && bash Openshift-EE/pipelines/OpenEBS-base/stages/5-infra-chaos/VD8F-node-failure-cstor/node-failure-cstor node '"'$CI_JOB_ID'"'' '"'$CI_PIPELINE_ID'"' '"'$CI_COMMIT_SHA'"' '"'$node_name'"' '"'$RELEASE_TAG'"'
}

node() {
job_id=$(echo $1)
pipeline_id=$(echo $2)
commit_id=$(echo $3)
source ~/.profile
gittoken=$(echo "$github_token")
case_id=VD8F
observer_node=$4

time="date"
current_time=$(eval $time)

present_dir=$(pwd)
echo $present_dir
bash Openshift-EE/utils/pooling jobname:fill-node-capacity
bash Openshift-EE/utils/e2e-cr jobname:node-failure-cstor jobphase:Running init_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" openebs_version:"$releaseTag"

################
# e2eBook 1 #
################

echo "*******Deploying Busybox-Deployment****"

test_name=$(bash Openshift-EE/utils/generate_test_name testcase=busybox-provision-node-failure-cstor metadata="")
echo $test_name

cd e2e-tests
echo "Running the e2e test for Busybox Deployment.."
cp apps/busybox/deployers/run_e2e_test.yml app_deploy_node_failure.yml

: << EOF
  -------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                             |
  -------------------------------------------------------------------------------------------------------------------|
 | appNamespace      | env    | app-busybox-ns                      | taint-node                                     |
 | e2e job label  | label  | app: busybox-e2e                 | app: node-failure-cstor                        | 
 | appLabel          | env    | app=busybox-sts                     | app=taint-node                                 |
 | storage class     | env    | openebs-cstor-sparse                | openebs-cstor-disk                             |
 | deploy type       | env    | statefulset                         | deployment                                     |
  --------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/app-busybox-ns/node-failure-cstor/g' \
-e 's/busybox-e2e/node-failure-cstor/g' \
-e 's/app=busybox-sts/app=node-failure-cstor/g' \
-e 's/openebs-cstor-sparse/openebs-cstor-disk/g' \
-e 's/statefulset/deployment/g' app_deploy_node_failure.yml

cat app_deploy_node_failure.yml

bash ../Openshift-EE/utils/e2e_job_runner label='app:node-failure-cstor' app_deploy_node_failure.yml
cd ..
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:node-failure-cstor $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
python3 Openshift-EE/utils/result/result_update.py $job_id VD8F 5-infra-chaos "Fail the node where the application is running and check the behaviour" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

################
# e2eBook 2 #
################

run_id="node-failure-cstor";test_name=$(bash Openshift-EE/utils/generate_test_name testcase=busybox-liveness metadata=${run_id})
echo $test_name

cd e2e-tests
# copy the content of deployer run_e2e_test.yml into a different file to update the test specific parameters.
cp apps/busybox/liveness/run_e2e_test.yml busybox_loadgen_node_failure_cstor.yml

# Update the environmental variables in e2e job spec.

: << EOF
  ----------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                               |
  ---------------------------------------------------------------------------------------------------------------------|
 | appNamespace      | env    | app-busybox-ns                      | node-failure-cstor                                       | 
 | e2e job label  | label  | liveness: e2e-busybox-liveness   | liveness: busybox-liveness-node-failure-cstor             |
 | appLabel          | env    | app=busybox-sts                     | app=node-failure-cstor                                   | 
  ----------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/value: app-busybox-ns/value: node-failure-cstor/g' \
-e 's/app=busybox-sts/app=node-failure-cstor/g' \
-e 's/liveness: e2e-busybox-liveness/liveness: busybox-liveness-node-failure-cstor/g' busybox_loadgen_node_failure_cstor.yml

cat busybox_loadgen_node_failure_cstor.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' busybox_loadgen_node_failure_cstor.yml

# Run the e2e job and get the details of the e2e job from e2e_job_runner utils.
bash ../Openshift-EE/utils/e2e_job_runner label='liveness:busybox-liveness-node-failure-cstor' job=busybox_loadgen_node_failure_cstor.yml
cd ..
# Get the cluster state Once the e2e jobs completed.
bash Openshift-EE/utils/dump_cluster_state;
# Update the e2e event for the job.
bash Openshift-EE/utils/event_updater jobname:node-failure-cstor $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
python3 Openshift-EE/utils/result/result_update.py $job_id VD8F 5-infra-chaos "Fail the node where the application is running and check the behaviour" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

################
# e2eBook 3 #
################

test_name=$(bash Openshift-EE/utils/generate_test_name testcase=node-failure metadata="")
echo $test_name

cd e2e-tests
cp experiments/chaos/node_failure/run_e2e_test.yml run_node_failure.yml

sed -i -e 's/value: app-percona-ns/value: node-failure-cstor/g' \
-e 's/password:/password: YzEwdWRieXQzQDE2NTg=/g' \
-e 's/name=percona/app=node-failure-cstor/g' run_node_failure.yml

sed -i -e "s|#nodeSelector|nodeSelector|g" \
-e "s|#  kubernetes.io/hostname:|  kubernetes.io/hostname: ${observer_node}|g" run_node_failure.yml

sed -i '/name: DATA_PERSISTENCE/{n;s/.*/            value: busybox/}' run_node_failure.yml

sed -i '/name: ESX_HOST_IP/{n;s/.*/            value: 10.23.1.1/}' run_node_failure.yml

sed -i '/parameters.yml: |/a \
    blocksize: 4k\
    blockcount: 1024\
    testfile: nodefailure
' run_node_failure.yml

cat run_node_failure.yml

bash ../Openshift-EE/utils/e2e_job_runner label='name:node-failure' run_node_failure.yml
cd ..
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:node-failure-cstor $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
python3 Openshift-EE/utils/result/result_update.py $job_id VD8F 5-infra-chaos "Fail the node where the application is running and check the behaviour" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

################
# e2eBook 4 #
################

run_id="deprovision-node-failure-cstor";test_name=$(bash Openshift-EE/utils/generate_test_name testcase=busybox-liveness metadata=${run_id})
echo $test_name

cd e2e-tests
# copy the content of deployer run_e2e_test.yml into a different file to update the test specific parameters.
cp apps/busybox/liveness/run_e2e_test.yml busybox_loadgen_deprovision_node_failure.yml

# Update the environmental variables in e2e job spec.

: << EOF
  ---------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                               |
  ---------------------------------------------------------------------------------------------------------------------|
 | appNamespace      | env    | app-busybox-ns                      | node-failure-cstor                                       | 
 | appLabel          | env    | app=busybox-sts                     | app=node-failure-cstor                                   |
 | e2e job label  | label  | liveness: e2e-busybox-liveness   | liveness: busybox-liveness-deprovision-drainnode |
 | action            | env    | provision                           | deprovision                                      | 
  ----------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/value: app-busybox-ns/value: node-failure-cstor/g' \
-e 's/app=busybox-sts/app=node-failure-cstor/g' \
-e 's/value: provision/value: deprovision/g' \
-e 's/generateName: e2e-busybox-liveness/generateName: busybox-liveness-dep-node-failure/g' \
-e 's/liveness: e2e-busybox-liveness/liveness: busybox-liveness-deprovision-node-failure/g' busybox_loadgen_deprovision_node_failure.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' busybox_loadgen_deprovision_node_failure.yml

cat busybox_loadgen_deprovision_node_failure.yml
# Run the e2e job and get the details of the e2e job from e2e_job_runner utils.
bash ../Openshift-EE/utils/e2e_job_runner label='liveness:busybox-liveness-deprovision-node-failure' job=busybox_loadgen_deprovision_node_failure.yml
cd ..
# Get the cluster state Once the e2e jobs completed.
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:node-failure-cstor $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

rc_val=$(echo $?)

# Update result of the test case in github mayadata-io/e2e-openshift repository.
if [ "$rc_val" != "0" ]; then
python3 Openshift-EE/utils/result/result_update.py $job_id VD8F 5-infra-chaos "Fail the node where the application is running and check the behaviour" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

################
# e2eBook 5 #
################

echo "********Deprovisioning Busybox Application*******"

test_name=$(bash Openshift-EE/utils/generate_test_name testcase=busybox-deprovision-node-failure-cstor metadata="")
echo $test_name

cd e2e-tests
cp apps/busybox/deployers/run_e2e_test.yml deprovision_node_failure.yml

: << EOF
  -------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                             |
  -------------------------------------------------------------------------------------------------------------------|
 | e2e Job name   | name   | generateName: e2e-busybox-deploy | generateName:e2e-busybox-deprovision        |
 | appNamespace      | env    | app-busybox-ns                      | node-failure-cstor                                     |
 | appLabel          | env    | app=busybox-sts                     | app=node-failure-cstor                                 |
 | deploy type       | env    | statefulset                         | deployment                                     |
 | e2e job label  | label  | app: busybox-e2e                 | app: busybox-deprovision-drain                 | 
 | storage class     | env    | openebs-cstor-sparse                | openebs-cstor-disk                             |
 | Action            | env    | provision                           | deprovision                                    |
  --------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/generateName: e2e-busybox-deploy/generateName: e2e-busybox-deprovision/g' \
-e 's/app-busybox-ns/node-failure-cstor/g' \
-e 's/app=busybox-sts/app=node-failure-cstor/g' \
-e 's/value: statefulset/value: deployment/g' \
-e 's/busybox-e2e/busybox-deprovision-node-failure/g' \
-e 's/openebs-cstor-sparse/openebs-cstor-disk/g' \
-e 's/value: provision/value: deprovision/g' deprovision_node_failure.yml

cat deprovision_node_failure.yml

bash ../Openshift-EE/utils/e2e_job_runner label='app:busybox-deprovision-node-failure' deprovision_node_failure.yml
cd ..
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:node-failure-cstor $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

rc_val=$(echo $?)
current_time=$(eval $time)

# testResult=$(kubectl get e2eresult ${test_name} --no-headers -o custom-columns=:spec.testStatus.result)

if [ "$rc_val" != "0" ]; then
bash Openshift-EE/utils/e2e-cr jobname:node-failure-cstor jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" openebs_version:"$releaseTag" test_result:Fail
python3 Openshift-EE/utils/result/result_update.py $job_id VD8F 5-infra-chaos "Fail the node where the application is running and check the behaviour" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

bash Openshift-EE/utils/e2e-cr jobname:node-failure-cstor jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" openebs_version:"$releaseTag" test_result:Pass
python3 Openshift-EE/utils/result/result_update.py $job_id VD8F 5-infra-chaos "Fail the node where the application is running and check the behaviour" Pass $pipeline_id "$current_time" $commit_id $gittoken

if [ "$rc_val" != "0" ]; then
exit 1;
fi
}

if [ "$1" == "node" ];then
  node $2 $3 $4 $5 $6
else
  pod
fi
