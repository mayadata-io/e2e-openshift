#!/bin/bash
set -x

pod() {
echo $CI_JOB_ID
###clone e2e-openshift-repo
echo "cloning e2e-openshift repo*************"
sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p $port 'git clone -b OpenEBS-base https://github.com/openebs/e2e-openshift.git'
sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p $port 'cd e2e-openshift && bash Openshift-EE/pipelines/OpenEBS-base/stages/4-chaos/HOSN-jiva-single-replica-failure/single-replica-failure node '"'$CI_JOB_ID'"'' '"'$CI_PIPELINE_ID'"' '"'$CI_COMMIT_SHA'"'
}

node() {
source ~/.profile
#github token to push the test result into github openebs/e2e-openshift repository. 
#This token is set as an env in ~/.profile in the test cluster.
gittoken=$(echo "$github_token")

job_id=$(echo $1) #Gitlab job id obtain from the gitlab env ($CI_JOB_ID).
pipeline_id=$(echo $2) # Gitlab pipeline id obtained from gitlab env ($CI_PIPELINE_ID).
commit_id=$(echo $3) #Gitlab commit id Obtained fron gilab env ($CI_COMMIT_SHA).
case_id=HOSN #test case ID.
gitlab_stage=4-chaos # Gitlab stage where this test case is running.
job_description="Induce failure on JIVA single replica deployment and check if it gets scheduled immediately and the application is available"

time="date"
current_time=$(eval $time)

present_dir=$(pwd)
echo $present_dir

#Creating e2e custom resoure result fot the each stage of the test.

bash Openshift-EE/utils/e2e-cr jobname:jiva-single-rep-kill jobphase:Waiting init_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"
bash Openshift-EE/utils/e2e-cr jobname:jiva-single-rep-kill jobphase:Running init_time:"$current_time"

################
# LitmusBook 1 #
################
#### Deploy BusyBox application

#testcase name for the busybox deployers will be append with busybox-{{ action }}- {{ app-namespace }}
#action will be provision or deprovision.
#app namespaces is the name to deploy the busybox application.
test_name=$(bash Openshift-EE/utils/generate_test_name testcase=busybox-provision-single-rep-kill metadata="")
echo $test_name

cd litmus
echo "Running the litmus test for Busybox Deployment.."

#copy the content of deployer run_litmus_test.yml into a different file to update the test specific parametes.
cp apps/busybox/deployers/run_litmus_test.yml busybox_single_rep_kill.yml

: << EOF
  --------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind     | default busybox value               | test specifc value                      |
  --------------------------------------------------------------------------------------------------------------|
 | Litmus job label  | label    | app: busybox-litmus                 | app: deploy-busybox-single-rep          |
 | Litmus job Name   | job name | generateName: litmus-busybox-deploy | generateName: busybox-deploy-single-rep |
 | appLabel          | env      | app=busybox-sts                     | app=single-rep-kill                     |
 | deploy type       | env      | statefulset                         | deployment                              |
 | storage class     | env      | openebs-cstor-sparse                | openebs-jiva-standalone                 |
 | pvcName           | env      | openebs-busybox                     | busybox-single-rep-kill                 | 
 | appNamespace      | env      | app-busybox-ns                      | single-rep-kill	                        | 
  --------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/app: busybox-litmus/app: deploy-busybox-single-rep/g' \
-e 's/generateName: litmus-busybox-deploy/generateName: busybox-deploy-single-rep/g' \
-e 's/app=busybox-sts/app=single-rep-kill/g' \
-e 's/value: statefulset/value: deployment/g' \
-e 's/value: openebs-cstor-sparse/value: openebs-jiva-standalone/g' \
-e 's/value: openebs-busybox/value: busybox-single-rep-kill/g' \
-e 's/value: app-busybox-ns/value: single-rep-kill/g' busybox_single_rep_kill.yml

cat busybox_single_rep_kill.yml

# Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../Openshift-EE/utils/litmus_job_runner label='app:deploy-busybox-single-rep' job=busybox_single_rep_kill.yml
cd ..

#Get the cluster state Once the litmus jobs completed.
bash Openshift-EE/utils/dump_cluster_state;
#Update the e2e event for the job
bash Openshift-EE/utils/event_updater jobname:jiva-single-rep-kill $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"
#Update the result of the test case in github openebs/e2e-openshift repository.
if [ "$?" != "0" ]; then
python3 Openshift-EE/utils/result/result_update.py $job_id $case_id $gitlab_stage $job_description Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

################
# LitmusBook 2 #
################
##### Run the litmus book to perform the Single Replica Failure failure on JIVA

## testcase name is defined in test_vars of LitmusBook.
run_id="single";test_name=$(${utils_path}/generate_test_name testcase=openebs-volume-replica-failure metadata=${run_id})
echo $test_name

cd litmus
cp apps/percona/chaos/openebs_volume_replica_failure/run_litmus_test.yml run_single_rep_failure.yml

: << EOF
  --------------------------------------------------------------------------------------------------------------------
 | specAttribute   | kind |         default value                         | test specifc value                       |
  -------------------------------------------------------------------------------------------------------------------|
 | pvcName         | env  | value: percona-mysql-claim                    | value: busybox-single-rep-kill           | 
 | Litmus Job name | name | generateName: openebs-volume-replica-failure  | generateName: single-replica-failure     |
 | Litmus job label| label| openebs-volume-replica-failure                | single-replica-failure                   |
 | appLabel        | env  | value: name=percona                           | value:  app=single-rep-kill              |
 | appNamespace    | env  | app-percon-ns                                 | single-rep-kill                          | 
  --------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/value: percona-mysql-claim/value: busybox-single-rep-kill/g' \
-e 's/generateName: openebs-volume-replica-failure/generateName: single-replica-failure/g' \
-e 's/openebs-volume-replica-failure/single-replica-failure/g' \
-e 's/value: '\''name=percona'\''/value: '\''app=single-rep-kill'\''/g' \
-e 's/value: app-percona-ns/value: single-rep-kill/g' run_single_rep_failure.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' run_single_rep_failure.yml

cat run_single_rep_failure.yml

bash ../Openshift-EE/utils/litmus_job_runner label='name:single-replica-failure' job=run_single_rep_failure.yml
cd ..
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:jiva-single-rep-kill $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
python3 Openshift-EE/utils/result/result_update.py $job_id $case_id $gitlab_stage $job_description Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

################
# LitmusBook 3 #
################
# Run the litmus book to Deprovison the busybox deployment

echo "********Deprovisioning Busybox Application*******"

test_name=$(bash Openshift-EE/utils/generate_test_name testcase=busybox-deprovision-single-rep-kill metadata="")
echo $test_name

cd litmus
cp apps/busybox/deployers/run_litmus_test.yml deprovision_single_rep_kill.yml

: << EOF
  ----------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                               |
  ---------------------------------------------------------------------------------------------------------------------|
 | Litmus Job name   | name   | generateName: litmus-busybox-deploy | generateName: busybox-deprovision-single-rep-kill|
 | Litmus job label  | label  | app: busybox-litmus                 | app: busybox-deprovision-single-rep-kill         |
 | appLabel          | env    | app=busybox-sts                     | app=single-rep-kill                              |
 | deploy type       | env    | statefulset                         | deployment                                       |
 | storage clas      | env    | openebs-cstor-sparse                | openebs-jiva-standalone                          |
 | pvcName           | env    | openebs-busybox                     | busybox-single-rep-kill                          | 
 | appNamespace      | env    | app-busybox-ns                      | single-rep-kill                                  | 
 | Action            | env    | value: provision                    | value: deprovision                               |
  ----------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/generateName: litmus-busybox-deploy/generateName: busybox-deprovision-single-rep-kill/g' \
-e 's/app: busybox-litmus/app: busybox-deprovision-single-rep-kill/g' \
-e 's/app=busybox-sts/app=single-rep-kill/g' \
-e 's/value: statefulset/value: deployment/g' \
-e 's/value: openebs-cstor-sparse/value: openebs-jiva-standalone/g' \
-e 's/value: openebs-busybox/value: busybox-single-rep-kill/g' \
-e 's/value: app-busybox-ns/value: single-rep-kill/g' \
-e 's/value: provision/value: deprovision/g' deprovision_single_rep_kill.yml

cat deprovision_single_rep_kill.yml

bash ../Openshift-EE/utils/litmus_job_runner label='app:busybox-deprovision-single-rep-kill' job=deprovision_single_rep_kill.yml
cd ..
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:jiva-single-rep-kill $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

rc_val=$(echo $?)

# testResult=$(kubectl get litmusresult ${test_name} --no-headers -o custom-columns=:spec.testStatus.result)

# if [ "$rc_val" != "0" ]; then
# exit 1;
# fi

current_time=$(eval $time)
bash Openshift-EE/utils/e2e-cr jobname:jiva-single-rep-kill jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" test_result:Pass

python3 Openshift-EE/utils/result/result_update.py $job_id $case_id $gitlab_stage $job_description Pass $pipeline_id "$current_time" $commit_id $gittoken
}

if [ "$1" == "node" ];then
  node $2 $3 $4
else
  pod
fi
