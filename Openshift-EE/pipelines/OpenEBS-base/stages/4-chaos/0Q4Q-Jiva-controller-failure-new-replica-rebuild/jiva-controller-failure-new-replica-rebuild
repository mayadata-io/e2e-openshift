#!/bin/bash


pod() {
sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p $port 'cd e2e-openshift && bash Openshift-EE/pipelines/OpenEBS-base/stages/4-chaos/0Q4Q-Jiva-controller-failure-new-replica-rebuild/jiva-controller-failure-new-replica-rebuild node '"'$CI_JOB_ID'"'' '"'$CI_PIPELINE_ID'"' '"'$CI_COMMIT_SHA'"' '"'$RELEASE_TAG'"' '"'$RELEASE_TAG'"'
}

node() {
job_id=$(echo $1)
pipeline_id=$(echo $2)
commit_id=$(echo $3)
releaseTag=$(echo $4)
case_id=0Q4Q

source ~/.profile
gittoken=$(echo "$github_token")

time="date"
current_time=$(eval $time)

present_dir=$(pwd)
echo $present_dir

bash Openshift-EE/utils/e2e-cr jobname:controller-failure-replica-scaleup jobphase:Waiting
bash Openshift-EE/utils/e2e-cr jobname:controller-failure-replica-scaleup jobphase:Running init_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" openebs_version:"$releaseTag"

###########Deploying Busybox Application

################
# LitmusBook 1 #
################

: << EOF
  ---------------------------------------------------------------------------------------------------------------------------     
 | specAttribute     | kind   |         default value               | test specifc value                                    |
  --------------------------------------------------------------------------------------------------------------------------|
 | Litmus job label  | label  | app: busybox-litmus                 | app: deploy-jiva-busybox-rep-scaleup                  |
 | Litmus Job name   | name   | generateName: litmus-busybox-deploy | generateName: busybox-provision-ctrl-kill-rep-scaleup  |
 | appLabel          | env    | app=busybox-sts                     | app=busybox-jiva-replica                              |
 | deploy type       | env    | statefulset                         | deployment                                            |
 | pvcName           | env    | openebs-busybox                     | busybox-ctrl-kill-rep-scaleup                          | 
 | storage clas      | env    | openebs-cstor-sparse                | openebs-jiva-standalone                               |
 | appNamespace      | env    | app-busybox-ns                      | ctrl-kill-rep-scaleup                                  |
  ---------------------------------------------------------------------------------------------------------------------------
EOF

test_name=$(bash Openshift-EE/utils/generate_test_name testcase=busybox-provision-ctrl-kill-rep-scaleup metadata="")
echo $test_name

cd litmus
echo "Running the litmus test for Busybox Deployment.."
cp apps/busybox/deployers/run_litmus_test.yml deploy_app_jiva_replica_scale_ctrl_kill.yml

sed -i -e 's/app: busybox-litmus/app: jiva-busybox-rep-scaleup-ctrl-kill/g' \
-e 's/generateName: litmus-busybox-deploy/generateName: busybox-provision-ctrl-kill-rep-scaleup/g' \
-e 's/app=busybox-sts/app=jiva-rep-scaleup-ctrl-kill/g' \
-e 's/value: statefulset/value: deployment/g' \
-e 's/imagePullPolicy: Always/imagePullPolicy: IfNotPresent/g' \
-e 's/value: openebs-busybox/value: busybox-ctrl-kill-rep-scaleup/g' \
-e 's/value: openebs-cstor-sparse/value: openebs-jiva-standalone/g' \
-e 's/value: app-busybox-ns/value: ctrl-kill-rep-scaleup/g' deploy_app_jiva_replica_scale_ctrl_kill.yml

cat deploy_app_jiva_replica_scale_ctrl_kill.yml

bash ../Openshift-EE/utils/litmus_job_runner label='app:jiva-busybox-rep-scaleup-ctrl-kill' deploy_app_jiva_replica_scale_ctrl_kill.yml
cd ..
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:controller-failure-replica-scaleup $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
python3 Openshift-EE/utils/result/result_update.py $job_id 0Q4Q 4-chaos "Verify if the Jiva replicas can be scaled up" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

##Running Busybox loadgen 

#################
# LitmusBook 2 #
#################

run_id="jiva-scaleup-ctrl-kill";test_name=$(bash Openshift-EE/utils/generate_test_name testcase=busybox-liveness metadata=${run_id})
echo $test_name

cd litmus
# copy the content of deployer run_litmus_test.yml into a different file to update the test specific parameters.
cp apps/busybox/liveness/run_litmus_test.yml busybox_loadgen_jiva_rep_scaleup_ctrl_kill.yml

# Update the environmental variables in litmus job spec.

: << EOF
  ---------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                               |
  ---------------------------------------------------------------------------------------------------------------------|
 | appNamespace      | env    | app-busybox-ns                      | ctrl-kill-rep-scaleup                             | 
 | Litmus job label  | label  | liveness: litmus-busybox-liveness   | liveness: busybox-liveness-app-rep-scaleup       |
 | appLabel          | env    | app=busybox-sts                     | app=busybox-jiva-replica                         | 
  ----------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/value: app-busybox-ns/value: ctrl-kill-rep-scaleup/g' \
-e 's/app=busybox-sts/app=jiva-rep-scaleup-ctrl-kill/g' \
-e 's/liveness: litmus-busybox-liveness/liveness: busybox-liveness-rep-scaleup-ctrl-kill/g' busybox_loadgen_jiva_rep_scaleup_ctrl_kill.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' busybox_loadgen_jiva_rep_scaleup_ctrl_kill.yml

cat busybox_loadgen_jiva_rep_scaleup_ctrl_kill.yml

# Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../Openshift-EE/utils/litmus_job_runner label='liveness:busybox-liveness-rep-scaleup-ctrl-kill' job=busybox_loadgen_jiva_rep_scaleup_ctrl_kill.yml
cd ..
# Get the cluster state Once the litmus jobs completed.
bash Openshift-EE/utils/dump_cluster_state;
# Update the e2e event for the job.
bash Openshift-EE/utils/event_updater jobname:controller-failure-replica-scaleup $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
python3 Openshift-EE/utils/result/result_update.py $job_id 0Q4Q 4-chaos "Verify if the Jiva replicas can be scaled up" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

##Scaling up the Jiva replicas 

#################
# LitmusBook 3 #
#################

run_id="controller-kill";test_name=$(bash Openshift-EE/utils/generate_test_name testcase=scaleup-jiva-replica metadata=${run_id})
echo $test_name

cd litmus
# copy the content of deployer run_litmus_test.yml into a different file to update the test specific parameters.
cp experiments/functional/scale_jiva_replica/run_litmus_test.yml ctrl_kill_scale_jiva_rep.yml

 # Update the environmental variables in litmus job spec.

: << EOF
  ---------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                               |
  ---------------------------------------------------------------------------------------------------------------------|
 | appNamespace      | env    | app-percona-ns                      | ctrl-kill-rep-scaleup                             |  
 | appPVC            | env    | percona-mysql-claim                 | busybox-ctrl-kill-rep-scaleup                     |
  ----------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/app-percona-ns/ctrl-kill-rep-scaleup/g' \
-e '/name: COMPONENT_FAILURE/{n;s/.*/            value: controller/}' \
-e '/name: APP_LABEL/{n;s/.*/            value: app=jiva-rep-scaleup-ctrl-kill/}' \
-e 's/app: scaleup-jiva-replica-litmus/app: scaleup-jiva-replica-litmus-ctrl-kill/g' \
-e 's/percona-mysql-claim/busybox-ctrl-kill-rep-scaleup/g'  ctrl_kill_scale_jiva_rep.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' ctrl_kill_scale_jiva_rep.yml

cat  ctrl_kill_scale_jiva_rep.yml
 # Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../Openshift-EE/utils/litmus_job_runner label='app:scaleup-jiva-replica-litmus-ctrl-kill' job=ctrl_kill_scale_jiva_rep.yml
cd ..
# Get the cluster state Once the litmus jobs completed.
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:controller-failure-replica-scaleup $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
python3 Openshift-EE/utils/result/result_update.py $job_id 0Q4Q 4-chaos "Verify if the Jiva replicas can be scaled up" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

#Deprovisioning Busybox-loadgen

################
# LitmusBook 4 #
################

run_id="deprovision-rep-scaleup-ctrl-kill";test_name=$(bash Openshift-EE/utils/generate_test_name testcase=busybox-liveness metadata=${run_id})
echo $test_name

cd litmus
# copy the content of deployer run_litmus_test.yml into a different file to update the test specific parameters.
cp apps/busybox/liveness/run_litmus_test.yml busybox_loadgen_deprovision_jiva_rep_scaleup_ctrl_kill.yml

# Update the environmental variables in litmus job spec.

: << EOF
  --------------------------------------------------------------------------------------------------------------------------------
 | specAttribute     | kind   |         default value               | test specifc value                                          |
  --------------------------------------------------------------------------------------------------------------------------------|
 | appNamespace      | env    | app-busybox-ns                      | ctrl-kill-rep-scaleup                                        | 
 | appLabel          | env    | app=busybox-sts                     | app=busybox-jiva-replica                                    |
 | Litmus job label  | label  | liveness: litmus-busybox-liveness   | liveness: busybox-liveness-deprovision-ctrl-kill-rep-scaleup |
 | action            | env    | provision                           | deprovision                                                 | 
  ---------------------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/value: app-busybox-ns/value: ctrl-kill-rep-scaleup/g' \
-e 's/app=busybox-sts/app=jiva-rep-scaleup-ctrl-kill/g' \
-e 's/value: provision/value: deprovision/g' \
-e 's/generateName: litmus-busybox-liveness/generateName: busybox-liveness-dep-replica-scaleup-ctrl-kill/g' \
-e 's/liveness: litmus-busybox-liveness/liveness: busybox-liveness-deprovision-replica-scaleup-ctrl-kill/g' busybox_loadgen_deprovision_jiva_rep_scaleup_ctrl_kill.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' busybox_loadgen_deprovision_jiva_rep_scaleup_ctrl_kill.yml

cat busybox_loadgen_deprovision_jiva_rep_scaleup_ctrl_kill.yml
# Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../Openshift-EE/utils/litmus_job_runner label='liveness:busybox-liveness-deprovision-replica-scaleup-ctrl-kill' job=busybox_loadgen_deprovision_jiva_rep_scaleup_ctrl_kill.yml
cd ..
# Get the cluster state Once the litmus jobs completed.
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:controller-failure-replica-scaleup $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

rc_val=$(echo $?)

# Update result of the test case in github mayadata-io/e2e-openshift repository.
if [ "$rc_val" != "0" ]; then
python3 Openshift-EE/utils/result/result_update.py $job_id 0Q4Q 4-chaos "Verify if the Jiva replicas can be scaled up" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

###########-Deprovisioning busybox Application

################
# LitmusBook 5 #
################
test_name=$(bash Openshift-EE/utils/generate_test_name testcase=busybox-deprovision-ctrl-kill-rep-scaleup metadata="")
echo $test_name

cd litmus
cp apps/busybox/deployers/run_litmus_test.yml deprovision_busybox_jiva_replica_ctrl_kill.yml

sed -i -e 's/generateName: litmus-busybox-deploy/generateName: busybox-deprovision-replica-scaleup/g' \
-e 's/app: busybox-litmus/app: deprovision-jiva-busybox-rep-scaleup-ctrl-kill/g' \
-e 's/app=busybox-sts/app=jiva-rep-scaleup-ctrl-kill/g' \
-e 's/value: statefulset/value: deployment/g' \
-e 's/value: openebs-cstor-sparse/value: openebs-jiva-standalone/g' \
-e 's/value: openebs-busybox/value: busybox-ctrl-kill-rep-scaleup/g' \
-e 's/value: app-busybox-ns/value: ctrl-kill-rep-scaleup/g' \
-e 's/value: provision/value: deprovision/g' deprovision_busybox_jiva_replica_ctrl_kill.yml

cat deprovision_busybox_jiva_replica_ctrl_kill.yml

bash ../Openshift-EE/utils/litmus_job_runner label='app:deprovision-jiva-busybox-rep-scaleup-ctrl-kill' job=deprovision_busybox_jiva_replica_ctrl_kill.yml
cd ..
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:controller-failure-replica-scaleup $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"
return_count=$?
current_time=$(eval $time)

if [ "$return_count" != "0" ]; then
bash Openshift-EE/utils/e2e-cr jobname:controller-failure-replica-scaleup jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" openebs_version:"$releaseTag" test_result:Fail
python3 Openshift-EE/utils/result/result_update.py $job_id 0Q4Q 4-chaos "Verify if the Jiva replicas can be scaled up" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

bash Openshift-EE/utils/e2e-cr jobname:controller-failure-replica-scaleup jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" openebs_version:"$releaseTag" test_result:Pass
python3 Openshift-EE/utils/result/result_update.py $job_id 0Q4Q 4-chaos "Verify if the Jiva replicas can be scaled up" Pass $pipeline_id "$current_time" $commit_id $gittoken

if [ "$return_count" != "0" ]; then
exit 1;
fi

}

if [ "$1" == "node" ];then
  node $2 $3 $4 $5
else
  pod
fi
