#!/bin/bash

pod() {
sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p $port 'git clone -b release-branch https://github.com/mayadata-io/e2e-openshift.git'
sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p $port 'cd e2e-openshift && bash Openshift-EE/pipelines/OpenEBS-base/stages/2-setup/K9YC-openebs-deploy/deploy-openebs node '"'$CI_JOB_ID'"'' '"'$CI_PIPELINE_ID'"' '"'$CI_COMMIT_SHA'"' '"'$RELEASE_TAG'"' '"'$RELEASE_BRANCH'"' '"'$NDM_TAG'"' '"'$E_USER'"' '"'$E_PASSWORD'"'
}

node() {
job_id=$(echo $1)
pipeline_id=$(echo $2)
commit_id=$(echo $3)
releaseTag=$(echo $4)
releaseBranch=$(echo $5)
ndmTag=$(echo $6)
case_id=K9YC
elastic_user=$(echo $7)
elastic_password=$(echo $8)

time="date"
current_time=$(eval $time)

present_dir=$(pwd)
echo $present_dir

for i in efk-vars.yml efk.yml get_url.yml; do
  wget https://raw.githubusercontent.com/openebs/e2e-infrastructure/master/workload/efk-client/playbook/$i
done

echo "EFK: Deploying Aggregrator and Forwarder on client"
ansible-playbook efk.yml --extra-vars "commit_id=$commit_id pipeline_id=$pipeline_id e_user=$elastic_user e_password=$elastic_password" 

# Applying e2e-CRD
echo "***Applying e2e-crd***********"
kubectl apply -f Openshift-EE/utils/e2e-crd.yml

echo "*****Deploying openebs*******"
bash Openshift-EE/utils/e2e-cr jobname:s2-j1-openebs-deploy jobphase:Waiting
bash Openshift-EE/utils/e2e-cr jobname:s2-j1-openebs-deploy jobphase:Running init_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" openebs_version:"$releaseTag"
bash Openshift-EE/utils/e2e-cr jobname:cstor-integration-test jobphase:Waiting
bash Openshift-EE/utils/e2e-cr jobname:bdd-jiva-volume jobphase:Waiting
bash Openshift-EE/utils/e2e-cr jobname:bdd-cstor-negative-invalid-storage-pool-claim jobphase:Waiting
bash Openshift-EE/utils/e2e-cr jobname:bdd-jiva-node-stickiness jobphase:Waiting
bash Openshift-EE/utils/e2e-cr jobname:bdd-jiva-snapshot jobphase:Waiting
bash Openshift-EE/utils/e2e-cr jobname:bdd-jiva-clone jobphase:Waiting
bash Openshift-EE/utils/e2e-cr jobname:bdd-cstor-volume-clone-provisioning jobphase:Waiting
bash Openshift-EE/utils/e2e-cr jobname:bdd-cstor-snapshot-provisioning jobphase:Waiting
bash Openshift-EE/utils/e2e-cr jobname:bdd-cstor-volume-provisioning jobphase:Waiting
# bash Openshift-EE/utils/e2e-cr jobname:bdd-cstor-volume-provisioning-negative jobphase:Waiting
bash Openshift-EE/utils/e2e-cr jobname:bdd-cstor-scaleup-replica jobphase:Waiting
bash Openshift-EE/utils/e2e-cr jobname:s2-j6-policies jobphase:Waiting 
bash Openshift-EE/utils/e2e-cr jobname:s2-j2-cstor-striped-pool jobphase:Waiting 
bash Openshift-EE/utils/e2e-cr jobname:s2-j3-cstor-mirrored-pool jobphase:Waiting
bash Openshift-EE/utils/e2e-cr jobname:s2-j4-cstor-raidz1-pool jobphase:Waiting
# bash Openshift-EE/utils/e2e-cr jobname:s2-j5-cstor-raidz2-pool jobphase:Waiting
bash Openshift-EE/utils/e2e-cr jobname:cstor-cspc-striped-pool jobphase:Waiting
bash Openshift-EE/utils/e2e-cr jobname:s2-j7-nfsv4-provision jobphase:Waiting
bash Openshift-EE/utils/e2e-cr jobname:s2-j8-nfsv4-jiva-provision jobphase:Waiting

source ~/.profile

git clone -b $INFRA_BRANCH https://github.com/openebs/e2e-infrastructure.git
cd e2e-infrastructure/env

##exporting jiva-controller-image as env##
export OPENEBS_IO_JIVA_CONTROLLER_IMAGE=openebs/jiva:$releaseTag
##exporting jiva-replica-image as env#
export OPENEBS_IO_JIVA_REPLICA_IMAGE=openebs/jiva:$releaseTag
##exporting m-apiserver as env##
export MAYA_APISERVER_IMAGE=openebs/m-apiserver:$releaseTag
##exporting maya-volume-exporter as env##
export OPENEBS_IO_VOLUME_MONITOR_IMAGE=openebs/m-exporter:$releaseTag
##exporting istgt-image as env##
export OPENEBS_IO_CSTOR_VOLUME_MGMT_IMAGE=openebs/cstor-volume-mgmt:$releaseTag
##exporting zfs-image as env##
export OPENEBS_IO_CSTOR_POOL_MGMT_IMAGE=openebs/cstor-pool-mgmt:$releaseTag

export OPENEBS_IO_CSTOR_POOL_IMAGE=openebs/cstor-pool:$releaseTag
##
export OPENEBS_IO_CSTOR_TARGET_IMAGE=openebs/cstor-istgt:$releaseTag

export OPENEBS_IO_CSTOR_POOL_EXPORTER_IMAGE=openebs/m-exporter:$releaseTag

export OPENEBS_LOCALPV_PROVISIONER_IMAGE=$releaseTag

export OPENEBS_ADMISSION_SERVER_IMAGE=$releaseTag

export OPENEBS_SNAPSHOT_OPERATOR_IMAGE=$releaseTag

export OPENEBS_PROVISIONER_IMAGE=$releaseTag

export SNAPSHOT_PROVISIONER_IMAGE=$releaseTag

export CSPC_OPERATOR_IMAGE=$releaseTag
######################################################
export NODE_DISK_MANAGER_IMAGE=$ndmTag

cd ../..

echo "Generating test name***************************"
test_name=$(bash Openshift-EE/utils/generate_test_name testcase=openebs-provision metadata="")
echo $test_name

## Clone the litmus repo, navigate to litmus root 

git clone https://github.com/mayadata-io/litmus.git
cd litmus

wget https://raw.githubusercontent.com/openebs/e2e-infrastructure/master/env-update/env.py # script to update openebs_setup.yaml
python3 env.py -f providers/openebs/installers/operator/master/litmusbook/run_litmus_test.yaml

echo "updated yaml"

sed -i -e 's/imagePullPolicy: Always/imagePullPolicy: IfNotPresent/g' \
-e "s/value: '10'/value: '20'/g" \
-e "s/value: master/value: $releaseBranch/g" providers/openebs/installers/operator/master/litmusbook/run_litmus_test.yaml

cat providers/openebs/installers/operator/master/litmusbook/run_litmus_test.yaml

#################
## RUNNER MAIN ##
#################

echo "Applying rbac.yml********************************"
kubectl apply -f ./hack/rbac.yaml
kubectl apply -f ./hack/crds.yaml

echo "Copying kube config for litmus"
cp ~/.kube/config admin.conf
kubectl create cm kubeconfig --from-file=admin.conf -n litmus

echo "Running litmus test for openebs deploy.."

run_test=providers/openebs/installers/operator/master/litmusbook/run_litmus_test.yaml
bash ../Openshift-EE/utils/litmus_job_runner label='provider:openebs-runner' job=$run_test

echo "Dumping state of cluster post job run"; echo ""
bash ../Openshift-EE/utils/dump_cluster_state;
cd ..
bash Openshift-EE/utils/event_updater jobname:s2-j1-openebs-deploy $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"
#################
## GET RESULT  ##
#################
rc_val=$(echo $?)
test_case_id="K9YC"

## Check the test status & result from the litmus result custom resource
source ~/.profile
gittoken=$(echo "$github_token")
testResult=$(kubectl get litmusresult ${test_name} --no-headers -o custom-columns=:spec.testStatus.result)
#python3 Openshift-EE/utils/result/result_update.py $job_id K9YC 2-setup "Deploy OpenEBS in OpenShift-EE-3.10 Cluster" $testResult $pipeline_id "$current_time" $commit_id $gittoken

current_time=$(eval $time)
bash Openshift-EE/utils/e2e-cr jobname:s2-j1-openebs-deploy jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" openebs_version:"$releaseTag" test_result:$testResult

python3 Openshift-EE/utils/result/result_update.py $job_id K9YC 2-setup "Deploy OpenEBS in OpenShift-EE Cluster" $testResult $pipeline_id "$current_time" $commit_id $gittoken

if [ "$rc_val" != "0" ]; then
exit 1;
fi

}

if [ "$1" == "node" ];then
  node $2 $3 $4 $5 $6 $7 $8 $9
else
  pod
fi
