#!/bin/bash
set -x

pod() {
echo $CI_JOB_ID
###clone e2e-openshift-repo
echo "cloning e2e-openshift repo*************"
sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip 'git clone https://github.com/openebs/e2e-openshift.git'
sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip 'cd e2e-openshift && git checkout master && bash Openshift-EE/pipelines/OpenEBS-base/stages/2-setup/K9YC-openebs-depoy/deploy-openebs node '"'$CI_JOB_ID'"''
}

node() {
job_id=$(echo $1)

time="date"
current_time=$(eval $time)

present_dir=$(pwd)
echo $present_dir

# Removing test_id from e2e-result.yml spec for simple mode
sed -i "s/-<job_id>/ /g" Openshift-EE/utils/e2e-result.yml

# Applying e2e-CRD
echo "***Applying e2e-crd***********"
kubectl apply -f Openshift-EE/utils/e2e-crd.yml

echo "*****Deploying openebs*******"
bash Openshift-EE/utils/e2e-cr jobname:s2-j1-openebs-deploy jobphase:Waiting
bash Openshift-EE/utils/e2e-cr jobname:s2-j1-openebs-deploy jobphase:Running init_time:"$current_time"
bash Openshift-EE/utils/e2e-cr jobname:s2-j3-policies jobphase:Waiting 
bash Openshift-EE/utils/e2e-cr jobname:s2-j2-cstor-pool jobphase:Waiting 

##exporting jiva-controller-image as env##
export OPENEBS_IO_JIVA_CONTROLLER_IMAGE=openebs/jiva:0.8.1
##exporting jiva-replica-image as env##
export OPENEBS_IO_JIVA_REPLICA_IMAGE=openebs/jiva:0.8.1
##exporting m-apiserver as env##
export MAYA_APISERVER_IMAGE=openebs/m-apiserver:0.8.1
##exporting maya-volume-exporter as env##
export OPENEBS_IO_VOLUME_MONITOR_IMAGE=openebs/m-exporter:0.8.1
##exporting istgt-image as env##
export OPENEBS_IO_CSTOR_VOLUME_MGMT_IMAGE=openebs/cstor-volume-mgmt:0.8.1
##exporting zfs-image as env##
export OPENEBS_IO_CSTOR_POOL_MGMT_IMAGE=openebs/cstor-pool-mgmt:0.8.1

export OPENEBS_IO_CSTOR_POOL_IMAGE=openebs/cstor-pool:0.8.1
##
export OPENEBS_IO_CSTOR_TARGET_IMAGE=openebs/cstor-istgt:0.8.1
##

echo "Generating test name***************************"
test_name=$(bash Openshift-EE/utils/generate_test_name testcase=openebsinstaller metadata="")
echo $test_name

## Clone the litmus repo, navigate to litmus root 

git clone https://github.com/openebs/litmus.git
cd litmus

wget https://raw.githubusercontent.com/openebs/e2e-infrastructure/master/env-update/env.py # script to update openebs_setup.yaml
python3 env.py -f providers/openebs/installers/operator/master/litmusbook/openebs_setup.yaml

echo "updated yaml"
cat providers/openebs/installers/operator/master/litmusbook/openebs_setup.yaml

#################
## RUNNER MAIN ##
#################

echo "Applying rbac.yml********************************"
kubectl apply -f ./hack/rbac.yaml

echo "Copying kube config for litmus"
cp ~/.kube/config admin.conf
kubectl create cm kubeconfig --from-file=admin.conf -n litmus

echo "Running litmus test for openebs deploy.."

run_test=providers/openebs/installers/operator/master/litmusbook/openebs_setup.yaml
bash ../Openshift-EE/utils/litmus_job_runner label='provider:openebs-setup' job=$run_test

echo "Dumping state of cluster post job run"; echo ""
bash ../Openshift-EE/utils/dump_cluster_state;

#################
## GET RESULT  ##
#################

## Check the test status & result from the litmus result custom resource

cd .. && bash Openshift-EE/utils/get_litmus_result ${test_name} s2-j1-openebs-deploy

}

#"$@"

if [ "$1" == "node" ];then
  node $2
else
  pod
fi
