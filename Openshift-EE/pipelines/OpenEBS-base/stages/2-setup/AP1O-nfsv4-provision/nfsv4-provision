#!/bin/bash
set -x
pod() {

sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p $port ssh root@10.23.1.10 'oc adm policy add-scc-to-user privileged system:serviceaccount:app-nfsv4-ns:nfs-provisioner'
sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p $port 'cd e2e-openshift && bash Openshift-EE/pipelines/OpenEBS-base/stages/2-setup/AP1O-nfsv4-provision/nfsv4-provision node '"'$CI_JOB_ID'"'' '"'$CI_PIPELINE_ID'"' '"'$CI_COMMIT_SHA'"'

}

node() {

job_id=$(echo $1)
pipeline_id=$(echo $2)
case_id=AP1O
commit_id=$(echo $3)
source ~/.profile
gittoken=$(echo "$github_token")

time="date"
current_time=$(eval $time)

#pooling over previous job to complete
echo "*******Creating cstor-pool**************"
bash Openshift-EE/utils/pooling jobname:s2-j6-policies
bash Openshift-EE/utils/e2e-cr jobname:s2-j7-nfsv4-provision jobphase:Running init_time:"$current_time"

test_name=$(bash Openshift-EE/utils/generate_test_name testcase=nfs-provision metadata="")
echo $test_name
cd litmus

# copy the content of deployer run_litmus_test.yml into a different file to update the test specific parameters.
cp providers/nfs-provisioner/run_litmus_test.yml nfsv4-provision.yml

sed -i -e 's/imagePullPolicy: Always/imagePullPolicy: IfNotPresent/g' \
-e 's/value: app-nfs-ns/value: app-nfsv4-ns/g' \
-e 's/value: openebs-nfs/value: openebs-nfs4/g' nfsv4-provision.yml

#################
## RUNNER MAIN ##
#################
echo "Running the litmus test.."

cat nfsv4-provision.yml

bash ../Openshift-EE/utils/litmus_job_runner label='app:nfs-litmus' job=nfsv4-provision.yml
bash ../Openshift-EE/utils/dump_cluster_state;
cd ..
bash Openshift-EE/utils/event_updater jobname:s2-j7-nfsv4-provision $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

#################
## GET RESULT  ##
#################
rc_val=$(echo $?)

## Check the test status & result from the litmus result custom resource
source ~/.profile
gittoken=$(echo "$github_token")
testResult=$(kubectl get litmusresult ${test_name} --no-headers -o custom-columns=:spec.testStatus.result)

current_time=$(eval $time)
bash Openshift-EE/utils/e2e-cr jobname:s2-j7-nfsv4-provision jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" test_result:Pass

python3 Openshift-EE/utils/result/result_update.py $job_id AP1O 2-setup "Create NFS provisioner vers 4.1 and corresponding storage class" $testResult $pipeline_id "$current_time" $commit_id $gittoken
if [ "$rc_val" != "0" ]; then
exit 1;
fi
}

if [ "$1" == "node" ];then
  node $2 $3 $4
else
  pod
fi