#!/bin/bash


pod(){
sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p $port 'cd e2e-openshift && bash Openshift-EE/pipelines/OpenEBS-base/stages/7-csi-functional/CGCH-cstor-cspc-pool-scaleup/cstor-cspc-pool-scaleup node '"'$CI_JOB_ID'"'' '"'$CI_PIPELINE_ID'"' '"'$CI_COMMIT_SHA'"' '"'$RELEASE_TAG'"'
}

node() {
source ~/.profile
gittoken=$(echo "$github_token")
job_id=$(echo $1)
pipeline_id=$(echo $2)
commit_id=$(echo $3)
releaseTag=$(echo $4)
case_id=CGCH

time="date"
current_time=$(eval $time)

present_dir=$(pwd)
echo $present_dir

bash Openshift-EE/utils/e2e-cr jobname:cstor-cspc-pool-scaleup jobphase:Waiting
bash Openshift-EE/utils/e2e-cr jobname:cstor-cspc-pool-expansion jobphase:Waiting
bash Openshift-EE/utils/e2e-cr jobname:cstor-cspc-pool-replace-blockdevice jobphase:Waiting
bash Openshift-EE/utils/e2e-cr jobname:cstor-cspc-pool-scaleup jobphase:Running init_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" openebs_version:"$releaseTag"

################
# LitmusBook 1 #
################

echo "****Deploying busybox Application using CSI****"

test_name=$(bash Openshift-EE/utils/generate_test_name testcase=busybox-provision-busybox-csi-mirror metadata='')
echo $test_name

cd litmus
echo "Running the litmus test for busybox Deployment.."
cp apps/busybox/deployers/run_litmus_test.yml deploy_mirror_csi_busybox.yml

sed -i -e 's/value: app-busybox-ns/value: busybox-csi-mirror/g' \
-e 's/app: busybox-litmus/app: busybox-litmus-csi-mirror/g' \
-e 's/generateName: litmus-busybox-deploy-/generateName: litmus-busybox-csi-mirror-/g' \
-e 's/value: statefulset/value: deployment/g' \
-e 's/value: openebs-cstor-sparse/value: openebs-cstor-mirror-cspc-sc/g' deploy_mirror_csi_busybox.yml

cat deploy_mirror_csi_busybox.yml

bash ../Openshift-EE/utils/litmus_job_runner label='app:busybox-litmus-csi-mirror' job=deploy_mirror_csi_busybox.yml
cd ..
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:cstor-cspc-pool-scaleup $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
exit 1;
fi

################
# LitmusBook 2 #
################

echo "****Busybox liveness****"

run_id="csi-mirror";test_name=$(bash Openshift-EE/utils/generate_test_name testcase=busybox-liveness metadata=${run_id})
echo $test_name

cd litmus
echo "Running the litmus test for busybox liveness..."
cp apps/busybox/liveness/run_litmus_test.yml liveness_csi_mirror_busybox.yml

sed -i -e 's/liveness: litmus-busybox-liveness/liveness: litmus-busybox-csi-mirror-liveness/g' \
-e 's/generateName: litmus-busybox-liveness-/generateName: litmus-busybox-csi-mirror-liveness-/g' \
-e 's/value: app-busybox-ns/value: busybox-csi-mirror/g' liveness_csi_mirror_busybox.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' liveness_csi_mirror_busybox.yml

cat liveness_csi_mirror_busybox.yml

bash ../Openshift-EE/utils/litmus_job_runner label='liveness:litmus-busybox-csi-mirror-liveness' job=liveness_csi_mirror_busybox.yml
cd ..
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:cstor-cspc-pool-scaleup $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"
rc_val=$(echo $?)
current_time=$(eval $time)

if [ "$rc_val" != "0" ]; then
exit 1;
fi

################
# LitmusBook 3 #
################

run_id="busybox-csi-cstor";test_name=$(bash Openshift-EE/utils/generate_test_name testcase=data-persistence-check metadata=${run_id})
echo $test_name

cd litmus
echo "Running the litmus test to check data-persistence for BusyBox Application..."
cp experiments/functional/data-persistence/run_litmus_test.yml bb_cstor_deployment_data_persistence.yml

sed -i -e 's/generateName: data-persistence-litmus-/generateName: data-persistence-busybox-deployment-cstor-/g' \
-e 's/name: data-persistence/name: bb-cstor-deployment-configmap/g' \
-e 's/name: litmus-data-persistence/name: data-persistence-busybox-deployment-cstor/g' \
-e '/name: APP_NAMESPACE/{n;s/.*/            value: busybox-csi-mirror/}' \
-e '/name: APP_LABEL/{n;s/.*/            value: '\''app=busybox-sts'\''/}' \
-e '/name: STATUS/{n;s/.*/            value: LOAD/}' \
-e '/name: DATA_PERSISTENCE/{n;s/.*/            value: busybox/}' bb_cstor_deployment_data_persistence.yml

## Insert the set of variables for busybox data consistency util into configmap spec.
sed -i '/parameters.yml: |/a \
    blocksize: 4k \
    blockcount: 1024 \
    testfile: busybox_deployment_cstor
' bb_cstor_deployment_data_persistence.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' bb_cstor_deployment_data_persistence.yml

cat bb_cstor_deployment_data_persistence.yml

bash ../Openshift-EE/utils/litmus_job_runner label='name:data-persistence-busybox-deployment-cstor' job=bb_cstor_deployment_data_persistence.yml
cd ..

bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:cstor-cspc-pool-scaleup $test_name jobid:"$job_id" pipeline_id:"$pipeline_id"

rc_val=$(echo $?)
current_time=$(eval $time)

if [ "$rc_val" != "0" ]; then
exit 1;
fi

#####################
#  LitmusBook 4    ##
#####################

test_name=$(bash Openshift-EE/utils/generate_test_name testcase=cstor-cspc-pool-scaleup metadata='')
echo $test_name

cd litmus
cp experiments/functional/day2_ops/cspc_pool/pool_scaleup/run_litmus_test.yml pool_scaleup.yml

sed -i -e '/name: POOL_NAME/{n;s/.*/            value: cstor-cspc-mirror-pool/}' \
-e '/name: POOL_TYPE/{n;s/.*/            value: mirror/}' \
-e '/name: OPERATOR_NS/{n;s/.*/            value: openebs/}' pool_scaleup.yml

cat pool_scaleup.yml

bash ../Openshift-EE/utils/litmus_job_runner label='app:cstor-cspc-pool-scaleup' job=pool_scaleup.yml
cd ..
bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:cstor-cspc-pool-scaleup $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

rc_val=$(echo $?)
current_time=$(eval $time)

if [ "$rc_val" != "0" ]; then
exit 1;
fi

##############################
# Verifying Data-persistence #
##############################

run_id="bb-cstor-verify";test_name=$(bash Openshift-EE/utils/generate_test_name testcase=data-persistence-check metadata=${run_id})
echo $test_name

cd litmus
echo "Running Litmus Book for verifying data-persistence against busybox application."
cp experiments/functional/data-persistence/run_litmus_test.yml bb_deployment_cstor_verify_data_persistence.yml

sed -i -e 's/generateName: data-persistence-litmus-/generateName: data-persistence-busybox-cstor-/g' \
-e 's/name: data-persistence/name: bb-cstor-deployment-configmap/g' \
-e 's/name: litmus-data-persistence/name: data-persistence-busybox-cstor-delay-verify/g' \
-e '/name: APP_NAMESPACE/{n;s/.*/            value: busybox-csi-mirror/}' \
-e '/name: APP_LABEL/{n;s/.*/            value: '\''app=busybox-sts'\''/}' \
-e '/name: STATUS/{n;s/.*/            value: VERIFY/}' \
-e '/name: DATA_PERSISTENCE/{n;s/.*/            value: busybox/}' bb_deployment_cstor_verify_data_persistence.yml

## Insert the set of variables for busybox data consistency util into configmap spec.
sed -i '/parameters.yml: |/a \
    blocksize: 4k \
    blockcount: 1024 \
    testfile: busybox_deployment_cstor
' bb_deployment_cstor_verify_data_persistence.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' bb_deployment_cstor_verify_data_persistence.yml

cat bb_deployment_cstor_verify_data_persistence.yml

bash ../Openshift-EE/utils/litmus_job_runner label='name:data-persistence-busybox-cstor-delay-verify' job=bb_deployment_cstor_verify_data_persistence.yml
cd ..

bash Openshift-EE/utils/dump_cluster_state;
bash Openshift-EE/utils/event_updater jobname:cstor-cspc-pool-scaleup $test_name jobid:"$job_id" pipeline_id:"$pipeline_id"

rc_val=$(echo $?)
current_time=$(eval $time)

if [ "$rc_val" != "0" ]; then
bash Openshift-EE/utils/e2e-cr jobname:cstor-cspc-pool-scaleup jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" openebs_version:"$releaseTag" test_result:Fail
exit 1;
fi

bash Openshift-EE/utils/e2e-cr jobname:cstor-cspc-pool-scaleup jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" openebs_version:"$releaseTag" test_result:Pass

}

if [ "$1" == "node" ];then
  node $2 $3 $4 $5
else
  pod
fi
