#!/bin/bash
set -x

pod() {
sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p $port 'cd e2e-openshift && bash Openshift-EE/pipelines/Prometheus/stages/4-chaos/N6AV-cstor-pool-kill/cstor-pool-kill node '"'$CI_JOB_ID'"'' '"'$CI_PIPELINE_ID'"' '"'$CI_COMMIT_SHA'"'
}

node() {

source ~/.profile
#github token to push the test result into github mayadata-io/e2e-openshift repository.
#This token is set as an env in ~/.profile in the test cluster.
gittoken=$(echo "$github_token")
job_id=$(echo $1) #Gitlab job id obtain from the gitlab env ($CI_JOB_ID).
pipeline_id=$(echo $2) # Gitlab pipeline id obtained from gitlab env ($CI_PIPELINE_ID).
commit_id=$(echo $3) #Gitlab commit id Obtained fron gilab env ($CI_COMMIT_SHA).
case_id=N6AV #test case ID.

time="date"
current_time=$(eval $time)

present_dir=$(pwd)
echo $present_dir
#Creating e2e custom resource result for the test.

# Waiting for 'pool-delete' job to complete in order to run 'pool-kill' job
bash Openshift-EE/utils/pooling jobname:pool-delete
bash Openshift-EE/utils/e2e-cr jobname:pool-kill jobphase:Running init_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"


################
# LitmusBook 1 #
################

# Performing cStor Pool kill
# testcase for cStor Pool kill is derived from litmus job test_vars.yml
run_id="kill";test_name=$(bash Openshift-EE/utils/generate_test_name testcase=openebs-pool-failure metadata=${run_id})
echo $test_name

cd litmus
# copy the content of deployer run_litmus_test.yml into a different file to update the test specific parameters.
cp experiments/chaos/openebs_pool_failure/run_litmus_test.yml poolkill.yml

# Update the environmental variables in litmus job spec.
: << EOF
  -----------------------------------------------------------------------------------------------------------------------    
 | specAttribute       | kind   |         default value               | test specifc value                              |
  ----------------------------------------------------------------------------------------------------------------------|
 | Litmus Job name     | name   | generateName: openebs-pool-failure- | generateName: openebs-pool-kill-                |
 | Litmus job label    | label  | name: openebs-pool-failure          | name: openebs-pool-kill                         |
 | ImagePullPolicy     | value  | Always                              | IfNotPresent                                    |
 | appNamespace        | env    | app-percona-ns                      | app-prometheus                                  |
 | appLabel            | label  | name=percona                        | name=prometheus                                 |
 | pvcName             | name   | percona-mysql-claim                 | prometheus-claim                                | 
 | livenessAppLabel    | label  |  ""                                 | liveness=prometheus-liveness                    |
 | livenessAppNamespace| env    |  ""                                 | app-prometheus                                  |
 | dataPersistency     | env    |  enable                             |                                                 |
  -----------------------------------------------------------------------------------------------------------------------
EOF

sed -i -e 's/generateName: openebs-pool-failure-/generateName: openebs-pool-kill-/g' \
-e 's/name: openebs-pool-failure/name: openebs-pool-kill/g' \
-e 's/imagePullPolicy: Always/imagePullPolicy: IfNotPresent/g' \
-e 's/value: app-percona-ns/value: app-prometheus/g' \
-e 's/value: '\''name=percona'\''/value: '\''name=prometheus'\''/g' \
-e 's/value: percona-mysql-claim/value: prometheus-claim/g' \
-e 's/enable//g' poolkill.yml

sed -i -e '/name: LIVENESS_APP_LABEL/!b;n;c\           \ value: "liveness=prometheus-liveness"' poolkill.yml

sed -i -e '/name: LIVENESS_APP_NAMESPACE/!b;n;c\            \ value: "app-prometheus"' poolkill.yml
      
sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' poolkill.yml

# Running the litmus test for cStor pool kill. 
cat poolkill.yml

bash ../Openshift-EE/utils/litmus_job_runner label='name:openebs-pool-kill' job=poolkill.yml
cd ..
# Get the cluster state Once the litmus jobs completed.
bash Openshift-EE/utils/dump_cluster_state;
# Update the e2e event for the job.
bash Openshift-EE/utils/event_updater jobname:pool-kill $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

if [ "$?" != "0" ]; then
#python3 Openshift-EE/utils/result/result_update.py $job_id N6AV 4-chaos "Kill cStor Pool" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

current_time=$(eval $time)
# Update the e2e cr once the job is completed
testResult=$(kubectl get litmusresult ${test_name} --no-headers -o custom-columns=:spec.testStatus.result)
bash Openshift-EE/utils/e2e-cr jobname:pool-kill jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" test_result:"$testResult"
#python3 Openshift-EE/utils/result/result_update.py $job_id  4-chaos "Kill cStor Pool" Pass $pipeline_id "$current_time" $commit_id $gittoken

}

if [ "$1" == "node" ];then
  node $2 $3 $4
else
  pod
fi