#!/bin/bash
set -x

pod() {
echo $CI_JOB_ID

# cloning e2e-openshift repo
sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p 1658 'git clone https://github.com/mayadata-io/e2e-openshift.git'
sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p 1658 'cd e2e-openshift && git checkout prometheus && bash Openshift-EE/pipelines/Prometheus/stages/3-functional/ELHN-deploy-prometheus/prometheus-provision node '"'$CI_JOB_ID'"'' '"'$CI_PIPELINE_ID'"' '"'$CI_COMMIT_SHA'"'
}

node() {
job_id=$(echo $1) #Gitlab job id obtain from the gitlab env ($CI_JOB_ID).
pipeline_id=$(echo $2) # Gitlab pipeline id obtained from gitlab env ($CI_PIPELINE_ID).
commit_id=$(echo $3) #Gitlab commit id Obtained fron gilab env ($CI_COMMIT_SHA).
case_id=ELHN #test case ID.

time="date"
current_time=$(eval $time)

#Creating e2e custom resource result for the test.

bash Openshift-EE/utils/e2e-cr jobname:prometheus-provision jobphase:Waiting
bash Openshift-EE/utils/e2e-cr jobname:prometheus-provision jobphase:Running init_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" 
 
################
# LitmusBook 1 #
################

# Deploying Prometheus Application 

#testcase for prometheus deployment is derived from  litmus job test_vars.yml

test_name=$(bash Openshift-EE/utils/generate_test_name testcase=prometheus-deployment metadata="")
echo $test_name

cd litmus

# Running the litmus test
run_test=apps/prometheus/deployers/run_litmus_test.yml

cat $run_test

# Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../Openshift-EE/utils/litmus_job_runner label='app:prometheus-deployment-litmus' job=$run_test

# Dumping state of cluster post job run
cd ..
# Get the cluster state Once the litmus jobs completed.
bash Openshift-EE/utils/dump_cluster_state;
# Update the e2e event for the job.
bash Openshift-EE/utils/event_updater jobname:prometheus-provision $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

# Update result of the test case in github mayadata-io/e2e-openshift repository.
if [ "$?" != "0" ]; then
#python3 Openshift-EE/utils/result/result_update.py $job_id ELHN 3-functional "Deploying prometheus application" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

################
# LitmusBook 2 #
################

# Deploying Prometheus Loadgen Application 

#testcase for prometheus loadgen is derived from  litmus job test_vars.yml

test_name=$(bash Openshift-EE/utils/generate_test_name testcase=avalanche-deployment metadata="")
echo $test_name

cd litmus

# Running the litmus test.. 
run_test=apps/prometheus/loadgen/run_litmus_test.yml

cat $run_test

# Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../Openshift-EE/utils/litmus_job_runner label='app:prometheus-loadgen-litmus' job=$run_test 


# Dumping state of cluster post job run 
cd ..
#Get the cluster state Once the litmus jobs completed.
bash Openshift-EE/utils/dump_cluster_state;
#Update the e2e event for the job
bash Openshift-EE/utils/event_updater jobname:prometheus-provision $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

# Update the result of the test case in github mayadata-io/e2e-openshift repository.
if [ "$?" != "0" ]; then
#python3 Openshift-EE/utils/result/result_update.py $job_id ELHN 3-functional "Deploying prometheus loadgen application" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

################
# LitmusBook 3 #
################

# Deploying Prometheus Liveness Job 

# testcase for prometheus liveness is derived from litmus job vars.yml

test_name=$(bash Openshift-EE/utils/generate_test_name testcase=prometheus-liveness metadata="")
echo $test_name

cd litmus

# Running the litmus test
run_test=apps/prometheus/liveness/run_litmus_test.yml

cat $run_test

# Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../Openshift-EE/utils/litmus_job_runner label='app:litmus-prometheus-liveness' job=$run_test 


# Dumping state of cluster post job run
cd ..
#Get the cluster state Once the litmus jobs completed.
bash Openshift-EE/utils/dump_cluster_state;
#Update the e2e event for the job
bash Openshift-EE/utils/event_updater jobname:prometheus-provision $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

# Update the result of the test case in github mayadata-io/e2e-openshift repository.
if [ "$?" != "0" ]; then
#python3 Openshift-EE/utils/result/result_update.py $job_id ELHN 3-functional "Deploying prometheus liveness job" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

# Update the e2e cr once the job is completed
testResult=$(kubectl get litmusresult ${test_name} --no-headers -o custom-columns=:spec.testStatus.result)
current_time=$(eval $time)
bash Openshift-EE/utils/e2e-cr jobname:prometheus-provision jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" test_result:"$testResult"
#python3 Openshift-EE/utils/result/result_update.py $job_id ELHN 3-functional "Scale the statefulset application replicas and verify the ring configuration" Pass $pipeline_id "$current_time" $commit_id $gittoken

}

if [ "$1" == "node" ];then
  node $2 $3 $4
else
  pod
fi